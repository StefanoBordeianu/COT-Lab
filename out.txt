['./main.py', 'out.s']
start <function Parser.program at 0x7fb6b1f44310>
getsym: varsym var
start <function Parser.block at 0x7fb6b1f3ff40>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7fb6b1f441f0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7fb6b1f441f0>
accepting comma == comma
getsym: ident i
start <function Parser.vardef at 0x7fb6b1f441f0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7fb6b1f441f0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7fb6b1f3fe20>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 140422647882432
start <function Parser.statement at 0x7fb6b1f3fe20>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x7fb6b1f3fbe0>
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
end <function Parser.expression at 0x7fb6b1f3fbe0>
end <function Parser.statement at 0x7fb6b1f3fe20>
StatList: appending 140422646600544 of type <class 'ir.AssignStat'> to 140422647882432
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7fb6b1f3fe20>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident i
accepting ident == ident
getsym: comma ,
Looking up i
expecting comma
accepting comma == comma
getsym: number 0
start <function Parser.expression at 0x7fb6b1f3fbe0>
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == number
accepting number == number
getsym: uptosym upto
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
end <function Parser.expression at 0x7fb6b1f3fbe0>
accepting downtosym == uptosym
expecting uptosym
accepting uptosym == uptosym
getsym: number 8
start <function Parser.expression at 0x7fb6b1f3fbe0>
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == number
accepting number == number
getsym: comma ,
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
end <function Parser.expression at 0x7fb6b1f3fbe0>
expecting comma
accepting comma == comma
getsym: ident i
start <function Parser.expression at 0x7fb6b1f3fbe0>
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == ident
getsym: plus +
Looking up i
Looking up i
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
getsym: number 1
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
end <function Parser.expression at 0x7fb6b1f3fbe0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7fb6b1f3fe20>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 140422646600976
start <function Parser.statement at 0x7fb6b1f3fe20>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fb6b1f3fbe0>
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
getsym: number 1
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
end <function Parser.expression at 0x7fb6b1f3fbe0>
end <function Parser.statement at 0x7fb6b1f3fe20>
StatList: appending 140422646601360 of type <class 'ir.AssignStat'> to 140422646600976
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7fb6b1f3fe20>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident i
start <function Parser.expression at 0x7fb6b1f3fbe0>
start <function Parser.term at 0x7fb6b1f3fac0>
start <function Parser.factor at 0x7fb6b1f3f9a0>
accepting ident == ident
getsym: endsym end
Looking up i
Looking up i
end <function Parser.factor at 0x7fb6b1f3f9a0>
end <function Parser.term at 0x7fb6b1f3fac0>
end <function Parser.expression at 0x7fb6b1f3fbe0>
end <function Parser.statement at 0x7fb6b1f3fe20>
StatList: appending 140422646601504 of type <class 'ir.PrintStat'> to 140422646600976
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 140422646600976 : [ 140422646601360 140422646601504 ]
end <function Parser.statement at 0x7fb6b1f3fe20>
StatList : new 140422646601648
end <function Parser.statement at 0x7fb6b1f3fe20>
StatList: appending 140422646601600 of type <class 'ir.ForStat'> to 140422647882432
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: period .
StatList 140422647882432 : [ 140422646600544 140422646601600 ]
end <function Parser.statement at 0x7fb6b1f3fe20>
end <function Parser.block at 0x7fb6b1f3ff40>
expecting period
accepting period == period
end <function Parser.program at 0x7fb6b1f44310>

 <class 'ir.Block'> 140422646601984 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140422647882432 {
	parent = 140422646601984
		children:
		<class 'ir.AssignStat'> 140422646600544 {
		parent = 140422647882432
			symbol: 	global int x
			expr: 	<class 'ir.Const'> 140422647881040 {
			parent = 140422646600544
				value: 	0
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.ForStat'> 140422646601600 {
		parent = 140422647882432
			unroll_remainder_statlist: 	<class 'ir.StatList'> 140422646601648 {
			parent = 140422646601600
			}
			step: 	<class 'ir.AssignStat'> 140422647880944 {
			parent = 140422646601600
				symbol: 	global int i
				expr: 	<class 'ir.BinExpr'> 140422646600880 {
				parent = 140422647880944
					children:
					'plus'
					<class 'ir.Var'> 140422646600688 {
					parent = 140422646600880
						symbol: 	global int i
					}
					<class 'ir.Const'> 140422646600784 {
					parent = 140422646600880
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 140422646601840 {
			parent = 140422646601600
				children:
				'lss'
				<class 'ir.Var'> 140422646601744 {
				parent = 140422646601840
					symbol: 	global int i
				}
				<class 'ir.Const'> 140422646600592 {
				parent = 140422646601840
					value: 	8
					symbol: 	None
				}
			}
			start_assign: 	<class 'ir.AssignStat'> 140422646601696 {
			parent = 140422646601600
				symbol: 	global int i
				expr: 	<class 'ir.Const'> 140422647882384 {
				parent = 140422646601696
					value: 	0
					symbol: 	None
				}
				offset: 	None
			}
			body: 	<class 'ir.StatList'> 140422646600976 {
			parent = 140422646601600
				children:
				<class 'ir.AssignStat'> 140422646601360 {
				parent = 140422646600976
					symbol: 	global int x
					expr: 	<class 'ir.BinExpr'> 140422646601264 {
					parent = 140422646601360
						children:
						'plus'
						<class 'ir.Var'> 140422646601072 {
						parent = 140422646601264
							symbol: 	global int x
						}
						<class 'ir.Const'> 140422646601168 {
						parent = 140422646601264
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
				}
				<class 'ir.PrintStat'> 140422646601504 {
				parent = 140422646600976
					children:
					<class 'ir.Var'> 140422646601408 {
					parent = 140422646601504
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 140422646601408 {
					parent = 140422646601504
						symbol: 	global int i
					}
				}
			}
		}
	}
	defs: 	<class 'ir.DefinitionList'> 140422647882288 {
	parent = 140422646601984
	}
} 

navigating children of <class 'ir.StatList'> 140422647882432 2
<class 'ir.Const'> 140422647881040
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646600544
<class 'ir.AssignStat'> 140422646600544
<class 'ir.StatList'> 140422646601648
StatList 140422646601648 : [ ]
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140422646601600
navigating children of <class 'ir.BinExpr'> 140422646600880 3
<class 'ir.Var'> 140422646600688
<class 'ir.Const'> 140422646600784
<class 'ir.BinExpr'> 140422646600880
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422647880944
<class 'ir.AssignStat'> 140422647880944
successfully navigated attr  step  of <class 'ir.ForStat'> 140422646601600
navigating children of <class 'ir.BinExpr'> 140422646601840 3
<class 'ir.Var'> 140422646601744
<class 'ir.Const'> 140422646600592
<class 'ir.BinExpr'> 140422646601840
successfully navigated attr  cond  of <class 'ir.ForStat'> 140422646601600
<class 'ir.Const'> 140422647882384
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646601696
<class 'ir.AssignStat'> 140422646601696
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140422646601600
navigating children of <class 'ir.StatList'> 140422646600976 2
navigating children of <class 'ir.BinExpr'> 140422646601264 3
<class 'ir.Var'> 140422646601072
<class 'ir.Const'> 140422646601168
<class 'ir.BinExpr'> 140422646601264
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646601360
<class 'ir.AssignStat'> 140422646601360
navigating children of <class 'ir.PrintStat'> 140422646601504 1
<class 'ir.Var'> 140422646601408
<class 'ir.Var'> 140422646601408
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140422646601504
<class 'ir.PrintStat'> 140422646601504
<class 'ir.StatList'> 140422646600976
StatList 140422646600976 : [ 140422646601360 140422646601504 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 140422646601600
<class 'ir.ForStat'> 140422646601600
<class 'ir.StatList'> 140422647882432
StatList 140422647882432 : [ 140422646600544 140422646601600 ]
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
<class 'ir.DefinitionList'> 140422647882288
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984
<class 'ir.Block'> 140422646601984
navigating children of <class 'ir.StatList'> 140422647882432 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646600544
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140422646601600
navigating children of <class 'ir.BinExpr'> 140422646600880 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422647880944
successfully navigated attr  step  of <class 'ir.ForStat'> 140422646601600
navigating children of <class 'ir.BinExpr'> 140422646601840 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140422646601600
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646601696
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140422646601600
navigating children of <class 'ir.StatList'> 140422646600976 2
navigating children of <class 'ir.BinExpr'> 140422646601264 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646601360
navigating children of <class 'ir.PrintStat'> 140422646601504 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140422646601504
successfully navigated attr  body  of <class 'ir.ForStat'> 140422646601600
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984
<class 'ir.Const'> 140422647881040
<class 'ir.AssignStat'> 140422646600544
<class 'ir.StatList'> 140422646601648
<class 'ir.Var'> 140422646600688
<class 'ir.Const'> 140422646600784
<class 'ir.BinExpr'> 140422646600880
<class 'ir.AssignStat'> 140422647880944
<class 'ir.Var'> 140422646601744
<class 'ir.Const'> 140422646600592
<class 'ir.BinExpr'> 140422646601840
<class 'ir.Const'> 140422647882384
<class 'ir.AssignStat'> 140422646601696
<class 'ir.Var'> 140422646601072
<class 'ir.Const'> 140422646601168
<class 'ir.BinExpr'> 140422646601264
<class 'ir.AssignStat'> 140422646601360
<class 'ir.Var'> 140422646601408
<class 'ir.PrintStat'> 140422646601504
<class 'ir.StatList'> 140422646600976
<class 'ir.ForStat'> 140422646601600

STARTING STRIP MINING

END CONSTANT
STEP CONSTANT
START CONSTANT
OUTER EXPRS CREATED
INNER EXPRS CREATED
StatList : new 140422646603808
INNER FOR CREATED
StatList : new 140422646604240
OUTER FOR CREATED
OUTER FOR INCOMINGs
<class 'ir.ForStat'> 140422646603904 {
parent = 140422647882432
	unroll_remainder_statlist: 	<class 'ir.StatList'> 140422646604240 {
	parent = 140422646603904
	}
	step: 	<class 'ir.AssignStat'> 140422646604000 {
	parent = 140422646603904
		symbol: 	auto int tmp_variable_for_strip_mining
		expr: 	<class 'ir.BinExpr'> 140422646602944 {
		parent = 140422646604000
			children:
			'plus'
			<class 'ir.Var'> 140422646602176 {
			parent = 140422646602944
				symbol: 	auto int tmp_variable_for_strip_mining
			}
			<class 'ir.Const'> 140422646602800 {
			parent = 140422646602944
				value: 	1
				symbol: 	None
			}
		}
		offset: 	None
	}
	cond: 	<class 'ir.BinExpr'> 140422646604144 {
	parent = 140422646603904
		children:
		'lss'
		<class 'ir.Var'> 140422646604048 {
		parent = 140422646604144
			symbol: 	auto int tmp_variable_for_strip_mining
		}
		<class 'ir.Const'> 140422646602848 {
		parent = 140422646604144
			value: 	2
			symbol: 	None
		}
	}
	start_assign: 	<class 'ir.AssignStat'> 140422646603952 {
	parent = 140422646603904
		symbol: 	auto int tmp_variable_for_strip_mining
		expr: 	<class 'ir.Const'> 140422646603088 {
		parent = 140422646603952
			value: 	0
			symbol: 	None
		}
		offset: 	None
	}
	body: 	<class 'ir.ForStat'> 140422646603472 {
	parent = 140422646603904
		unroll_remainder_statlist: 	<class 'ir.StatList'> 140422646603808 {
		parent = 140422646603472
		}
		step: 	<class 'ir.AssignStat'> 140422646603568 {
		parent = 140422646603472
			symbol: 	global int i
			expr: 	<class 'ir.BinExpr'> 140422646600880 {
			parent = 140422646603568
				children:
				'plus'
				<class 'ir.Var'> 140422646600688 {
				parent = 140422646600880
					symbol: 	global int i
				}
				<class 'ir.Const'> 140422646600784 {
				parent = 140422646600880
					value: 	1
					symbol: 	None
				}
			}
			offset: 	None
		}
		cond: 	<class 'ir.BinExpr'> 140422646603712 {
		parent = 140422646603472
			children:
			'lss'
			<class 'ir.Var'> 140422646603616 {
			parent = 140422646603712
				symbol: 	global int i
			}
			<class 'ir.BinExpr'> 140422646603376 {
			parent = 140422646603712
				children:
				'plus'
				<class 'ir.BinExpr'> 140422646603280 {
				parent = 140422646603376
					children:
					'times'
					<class 'ir.Var'> 140422646602272 {
					parent = 140422646603280
						symbol: 	auto int tmp_variable_for_strip_mining
					}
					<class 'ir.Const'> 140422646602464 {
					parent = 140422646603280
						value: 	4
						symbol: 	None
					}
				}
				<class 'ir.Const'> 140422646602560 {
				parent = 140422646603376
					value: 	4
					symbol: 	None
				}
			}
		}
		start_assign: 	<class 'ir.AssignStat'> 140422646603520 {
		parent = 140422646603472
			symbol: 	global int i
			expr: 	<class 'ir.BinExpr'> 140422646603136 {
			parent = 140422646603520
				children:
				'times'
				<class 'ir.Var'> 140422646602128 {
				parent = 140422646603136
					symbol: 	auto int tmp_variable_for_strip_mining
				}
				<class 'ir.Const'> 140422646602416 {
				parent = 140422646603136
					value: 	4
					symbol: 	None
				}
			}
			offset: 	None
		}
		body: 	<class 'ir.StatList'> 140422646600976 {
		parent = 140422646603472
			children:
			<class 'ir.AssignStat'> 140422646601360 {
			parent = 140422646600976
				symbol: 	global int x
				expr: 	<class 'ir.BinExpr'> 140422646601264 {
				parent = 140422646601360
					children:
					'plus'
					<class 'ir.Var'> 140422646601072 {
					parent = 140422646601264
						symbol: 	global int x
					}
					<class 'ir.Const'> 140422646601168 {
					parent = 140422646601264
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			<class 'ir.PrintStat'> 140422646601504 {
			parent = 140422646600976
				children:
				<class 'ir.Var'> 140422646601408 {
				parent = 140422646601504
					symbol: 	global int i
				}
				expr: 	<class 'ir.Var'> 140422646601408 {
				parent = 140422646601504
					symbol: 	global int i
				}
			}
		}
	}
}
<class 'ir.StatList'> 140422647882432
<class 'ir.DefinitionList'> 140422647882288
<class 'ir.Block'> 140422646601984
navigating children of <class 'ir.StatList'> 140422647882432 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646600544
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140422646603904
navigating children of <class 'ir.BinExpr'> 140422646602944 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646604000
successfully navigated attr  step  of <class 'ir.ForStat'> 140422646603904
navigating children of <class 'ir.BinExpr'> 140422646604144 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140422646603904
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646603952
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140422646603904
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.BinExpr'> 140422646600880 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646603568
successfully navigated attr  step  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.BinExpr'> 140422646603712 3
navigating children of <class 'ir.BinExpr'> 140422646603376 3
navigating children of <class 'ir.BinExpr'> 140422646603280 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.BinExpr'> 140422646603136 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646603520
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.StatList'> 140422646600976 2
navigating children of <class 'ir.BinExpr'> 140422646601264 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646601360
navigating children of <class 'ir.PrintStat'> 140422646601504 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140422646601504
successfully navigated attr  body  of <class 'ir.ForStat'> 140422646603472
successfully navigated attr  body  of <class 'ir.ForStat'> 140422646603904
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984
<class 'ir.Const'> 140422647881040 -> <class 'ir.AssignStat'> 140422646600544
<class 'ir.AssignStat'> 140422646600544 -> <class 'ir.StatList'> 140422647882432
<class 'ir.StatList'> 140422646604240 -> <class 'ir.ForStat'> 140422646603904
<class 'ir.Var'> 140422646602176 -> <class 'ir.BinExpr'> 140422646602944
<class 'ir.Const'> 140422646602800 -> <class 'ir.BinExpr'> 140422646602944
<class 'ir.BinExpr'> 140422646602944 -> <class 'ir.AssignStat'> 140422646604000
<class 'ir.AssignStat'> 140422646604000 -> <class 'ir.ForStat'> 140422646603904
<class 'ir.Var'> 140422646604048 -> <class 'ir.BinExpr'> 140422646604144
<class 'ir.Const'> 140422646602848 -> <class 'ir.BinExpr'> 140422646604144
<class 'ir.BinExpr'> 140422646604144 -> <class 'ir.ForStat'> 140422646603904
<class 'ir.Const'> 140422646603088 -> <class 'ir.AssignStat'> 140422646603952
<class 'ir.AssignStat'> 140422646603952 -> <class 'ir.ForStat'> 140422646603904
<class 'ir.StatList'> 140422646603808 -> <class 'ir.ForStat'> 140422646603472
<class 'ir.Var'> 140422646600688 -> <class 'ir.BinExpr'> 140422646600880
<class 'ir.Const'> 140422646600784 -> <class 'ir.BinExpr'> 140422646600880
<class 'ir.BinExpr'> 140422646600880 -> <class 'ir.AssignStat'> 140422646603568
<class 'ir.AssignStat'> 140422646603568 -> <class 'ir.ForStat'> 140422646603472
<class 'ir.Var'> 140422646603616 -> <class 'ir.BinExpr'> 140422646603712
<class 'ir.Var'> 140422646602272 -> <class 'ir.BinExpr'> 140422646603280
<class 'ir.Const'> 140422646602464 -> <class 'ir.BinExpr'> 140422646603280
<class 'ir.BinExpr'> 140422646603280 -> <class 'ir.BinExpr'> 140422646603376
<class 'ir.Const'> 140422646602560 -> <class 'ir.BinExpr'> 140422646603376
<class 'ir.BinExpr'> 140422646603376 -> <class 'ir.BinExpr'> 140422646603712
<class 'ir.BinExpr'> 140422646603712 -> <class 'ir.ForStat'> 140422646603472
<class 'ir.Var'> 140422646602128 -> <class 'ir.BinExpr'> 140422646603136
<class 'ir.Const'> 140422646602416 -> <class 'ir.BinExpr'> 140422646603136
<class 'ir.BinExpr'> 140422646603136 -> <class 'ir.AssignStat'> 140422646603520
<class 'ir.AssignStat'> 140422646603520 -> <class 'ir.ForStat'> 140422646603472
<class 'ir.Var'> 140422646601072 -> <class 'ir.BinExpr'> 140422646601264
<class 'ir.Const'> 140422646601168 -> <class 'ir.BinExpr'> 140422646601264
<class 'ir.BinExpr'> 140422646601264 -> <class 'ir.AssignStat'> 140422646601360
<class 'ir.AssignStat'> 140422646601360 -> <class 'ir.StatList'> 140422646600976
<class 'ir.Var'> 140422646601408 -> <class 'ir.PrintStat'> 140422646601504
<class 'ir.PrintStat'> 140422646601504 -> <class 'ir.StatList'> 140422646600976
<class 'ir.StatList'> 140422646600976 -> <class 'ir.ForStat'> 140422646603472
<class 'ir.ForStat'> 140422646603472 -> <class 'ir.ForStat'> 140422646603904
<class 'ir.ForStat'> 140422646603904 -> <class 'ir.StatList'> 140422647882432
<class 'ir.StatList'> 140422647882432 -> <class 'ir.Block'> 140422646601984
<class 'ir.DefinitionList'> 140422647882288 -> <class 'ir.Block'> 140422646601984
<class 'ir.Block'> 140422646601984 -> <class 'NoneType'> 94575947703264

Total nodes in IR: 40 

navigating children of <class 'ir.StatList'> 140422647882432 2
StatList : new 140422646602752
Lowering <class 'ir.Const'> 140422647881040
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646600544
StatList : new 140422646602656
Lowering <class 'ir.AssignStat'> 140422646600544
Cannot lower 140422646604240 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140422646603904
navigating children of <class 'ir.BinExpr'> 140422646602944 3
StatList : new 140422646604432
Lowering <class 'ir.Var'> 140422646602176
StatList : new 140422646604912
Lowering <class 'ir.Const'> 140422646602800
StatList : new 140422646605008
Lowering <class 'ir.BinExpr'> 140422646602944
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646604000
StatList : new 140422646605248
Lowering <class 'ir.AssignStat'> 140422646604000
successfully navigated attr  step  of <class 'ir.ForStat'> 140422646603904
navigating children of <class 'ir.BinExpr'> 140422646604144 3
StatList : new 140422646605440
Lowering <class 'ir.Var'> 140422646604048
StatList : new 140422646605728
Lowering <class 'ir.Const'> 140422646602848
StatList : new 140422646605824
Lowering <class 'ir.BinExpr'> 140422646604144
successfully navigated attr  cond  of <class 'ir.ForStat'> 140422646603904
StatList : new 140422646606160
Lowering <class 'ir.Const'> 140422646603088
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646603952
StatList : new 140422646606256
Lowering <class 'ir.AssignStat'> 140422646603952
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140422646603904
Cannot lower 140422646603808 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.BinExpr'> 140422646600880 3
StatList : new 140422646606400
Lowering <class 'ir.Var'> 140422646600688
StatList : new 140422646606736
Lowering <class 'ir.Const'> 140422646600784
StatList : new 140422646606832
Lowering <class 'ir.BinExpr'> 140422646600880
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646603568
StatList : new 140422646607072
Lowering <class 'ir.AssignStat'> 140422646603568
successfully navigated attr  step  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.BinExpr'> 140422646603712 3
StatList : new 140422646607264
Lowering <class 'ir.Var'> 140422646603616
navigating children of <class 'ir.BinExpr'> 140422646603376 3
navigating children of <class 'ir.BinExpr'> 140422646603280 3
StatList : new 140422646607552
Lowering <class 'ir.Var'> 140422646602272
StatList : new 140422646607840
Lowering <class 'ir.Const'> 140422646602464
StatList : new 140422646607936
Lowering <class 'ir.BinExpr'> 140422646603280
StatList : new 140422646608272
Lowering <class 'ir.Const'> 140422646602560
StatList : new 140422646608368
Lowering <class 'ir.BinExpr'> 140422646603376
StatList : new 140422646608608
Lowering <class 'ir.BinExpr'> 140422646603712
successfully navigated attr  cond  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.BinExpr'> 140422646603136 3
StatList : new 140422646608896
Lowering <class 'ir.Var'> 140422646602128
StatList : new 140422646609184
Lowering <class 'ir.Const'> 140422646602416
StatList : new 140422646609280
Lowering <class 'ir.BinExpr'> 140422646603136
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646603520
StatList : new 140422646609520
Lowering <class 'ir.AssignStat'> 140422646603520
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140422646603472
navigating children of <class 'ir.StatList'> 140422646600976 2
navigating children of <class 'ir.BinExpr'> 140422646601264 3
StatList : new 140422646609712
Lowering <class 'ir.Var'> 140422646601072
StatList : new 140422646610048
Lowering <class 'ir.Const'> 140422646601168
StatList : new 140422646610144
Lowering <class 'ir.BinExpr'> 140422646601264
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140422646601360
StatList : new 140422646610384
Lowering <class 'ir.AssignStat'> 140422646601360
navigating children of <class 'ir.PrintStat'> 140422646601504 1
StatList : new 140422646610624
Lowering <class 'ir.Var'> 140422646601408
StatList : new 140422646610912
Lowering <class 'ir.Var'> 140422646601408
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140422646601504
StatList : new 140422646611008
Lowering <class 'ir.PrintStat'> 140422646601504
Cannot lower 140422646600976 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 140422646603472
StatList : new 140422646611344
Lowering <class 'ir.ForStat'> 140422646603472
successfully navigated attr  body  of <class 'ir.ForStat'> 140422646603904
StatList : new 140422646611728
Lowering <class 'ir.ForStat'> 140422646603904
Cannot lower 140422647882432 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
Cannot lower 140422647882288 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984
Cannot lower 140422646601984 <class 'ir.Block'> 'Block' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140422647882432 2
navigating children of <class 'ir.StatList'> 140422646602656 2
navigating children of <class 'ir.StatList'> 140422646602752 1
navigating children of <class 'ir.StatList'> 140422646611728 8
navigating children of <class 'ir.StatList'> 140422646606256 2
navigating children of <class 'ir.StatList'> 140422646606160 1
navigating children of <class 'ir.StatList'> 140422646605824 3
navigating children of <class 'ir.StatList'> 140422646605440 1
navigating children of <class 'ir.StatList'> 140422646605728 1
navigating children of <class 'ir.StatList'> 140422646611344 8
navigating children of <class 'ir.StatList'> 140422646609520 2
navigating children of <class 'ir.StatList'> 140422646609280 3
navigating children of <class 'ir.StatList'> 140422646608896 1
navigating children of <class 'ir.StatList'> 140422646609184 1
navigating children of <class 'ir.StatList'> 140422646608608 3
navigating children of <class 'ir.StatList'> 140422646607264 1
navigating children of <class 'ir.StatList'> 140422646608368 3
navigating children of <class 'ir.StatList'> 140422646607936 3
navigating children of <class 'ir.StatList'> 140422646607552 1
navigating children of <class 'ir.StatList'> 140422646607840 1
navigating children of <class 'ir.StatList'> 140422646608272 1
navigating children of <class 'ir.StatList'> 140422646600976 2
navigating children of <class 'ir.StatList'> 140422646610384 2
navigating children of <class 'ir.StatList'> 140422646610144 3
navigating children of <class 'ir.StatList'> 140422646609712 1
navigating children of <class 'ir.StatList'> 140422646610048 1
navigating children of <class 'ir.StatList'> 140422646611008 2
navigating children of <class 'ir.StatList'> 140422646610912 1
navigating children of <class 'ir.StatList'> 140422646607072 2
navigating children of <class 'ir.StatList'> 140422646606832 3
navigating children of <class 'ir.StatList'> 140422646606400 1
navigating children of <class 'ir.StatList'> 140422646606736 1
navigating children of <class 'ir.StatList'> 140422646605248 2
navigating children of <class 'ir.StatList'> 140422646605008 3
navigating children of <class 'ir.StatList'> 140422646604432 1
navigating children of <class 'ir.StatList'> 140422646604912 1
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984

 <class 'ir.Block'> 140422646601984 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140422647882432 {
	parent = 140422646601984
		children:
		<class 'ir.StatList'> 140422646602656 {
		parent = 140422647882432
			children:
			<class 'ir.StatList'> 140422646602752 {
			parent = 140422646602656
				children:
				reg int t0 <- 0
			}
			global int x <- reg int t0
		}
		<class 'ir.StatList'> 140422646611728 {
		parent = 140422647882432
			children:
			<class 'ir.StatList'> 140422646606256 {
			parent = 140422646611728
				children:
				<class 'ir.StatList'> 140422646606160 {
				parent = 140422646606256
					children:
					reg int t7 <- 0
				}
				auto int tmp_variable_for_strip_mining <- reg int t7
			}
			label3: <class 'ir.StatList'> 140422646605824 {
			parent = 140422646611728
				children:
				<class 'ir.StatList'> 140422646605440 {
				parent = 140422646605824
					children:
					reg int t4 <- auto int tmp_variable_for_strip_mining
				}
				<class 'ir.StatList'> 140422646605728 {
				parent = 140422646605824
					children:
					reg int t5 <- 2
				}
				reg int32_t t6 <- reg int t4 lss reg int t5
			}
			branch on not reg int32_t t6 to auto label label4
			<class 'ir.StatList'> 140422646611344 {
			parent = 140422646611728
				children:
				<class 'ir.StatList'> 140422646609520 {
				parent = 140422646611344
					children:
					<class 'ir.StatList'> 140422646609280 {
					parent = 140422646609520
						children:
						<class 'ir.StatList'> 140422646608896 {
						parent = 140422646609280
							children:
							reg int t18 <- auto int tmp_variable_for_strip_mining
						}
						<class 'ir.StatList'> 140422646609184 {
						parent = 140422646609280
							children:
							reg int t19 <- 4
						}
						reg int32_t t20 <- reg int t18 times reg int t19
					}
					global int i <- reg int32_t t20
				}
				label1: <class 'ir.StatList'> 140422646608608 {
				parent = 140422646611344
					children:
					<class 'ir.StatList'> 140422646607264 {
					parent = 140422646608608
						children:
						reg int t11 <- global int i
					}
					<class 'ir.StatList'> 140422646608368 {
					parent = 140422646608608
						children:
						<class 'ir.StatList'> 140422646607936 {
						parent = 140422646608368
							children:
							<class 'ir.StatList'> 140422646607552 {
							parent = 140422646607936
								children:
								reg int t12 <- auto int tmp_variable_for_strip_mining
							}
							<class 'ir.StatList'> 140422646607840 {
							parent = 140422646607936
								children:
								reg int t13 <- 4
							}
							reg int32_t t14 <- reg int t12 times reg int t13
						}
						<class 'ir.StatList'> 140422646608272 {
						parent = 140422646608368
							children:
							reg int t15 <- 4
						}
						reg int32_t t16 <- reg int32_t t14 plus reg int t15
					}
					reg int32_t t17 <- reg int t11 lss reg int32_t t16
				}
				branch on not reg int32_t t17 to auto label label2
				<class 'ir.StatList'> 140422646600976 {
				parent = 140422646611344
					children:
					<class 'ir.StatList'> 140422646610384 {
					parent = 140422646600976
						children:
						<class 'ir.StatList'> 140422646610144 {
						parent = 140422646610384
							children:
							<class 'ir.StatList'> 140422646609712 {
							parent = 140422646610144
								children:
								reg int t21 <- global int x
							}
							<class 'ir.StatList'> 140422646610048 {
							parent = 140422646610144
								children:
								reg int t22 <- 1
							}
							reg int32_t t23 <- reg int t21 plus reg int t22
						}
						global int x <- reg int32_t t23
					}
					<class 'ir.StatList'> 140422646611008 {
					parent = 140422646600976
						children:
						<class 'ir.StatList'> 140422646610912 {
						parent = 140422646611008
							children:
							reg int t25 <- global int i
						}
						print reg int t25
					}
				}
				<class 'ir.StatList'> 140422646607072 {
				parent = 140422646611344
					children:
					<class 'ir.StatList'> 140422646606832 {
					parent = 140422646607072
						children:
						<class 'ir.StatList'> 140422646606400 {
						parent = 140422646606832
							children:
							reg int t8 <- global int i
						}
						<class 'ir.StatList'> 140422646606736 {
						parent = 140422646606832
							children:
							reg int t9 <- 1
						}
						reg int32_t t10 <- reg int t8 plus reg int t9
					}
					global int i <- reg int32_t t10
				}
				branch  to auto label label1
				label2: <class 'ir.EmptyStat'> 140422646611200 {
				parent = 140422646611344
				}
				<class 'ir.StatList'> 140422646603808 {
				parent = 140422646611344
				}
			}
			<class 'ir.StatList'> 140422646605248 {
			parent = 140422646611728
				children:
				<class 'ir.StatList'> 140422646605008 {
				parent = 140422646605248
					children:
					<class 'ir.StatList'> 140422646604432 {
					parent = 140422646605008
						children:
						reg int t1 <- auto int tmp_variable_for_strip_mining
					}
					<class 'ir.StatList'> 140422646604912 {
					parent = 140422646605008
						children:
						reg int t2 <- 1
					}
					reg int32_t t3 <- reg int t1 plus reg int t2
				}
				auto int tmp_variable_for_strip_mining <- reg int32_t t3
			}
			branch  to auto label label3
			label4: <class 'ir.EmptyStat'> 140422646611536 {
			parent = 140422646611728
			}
			<class 'ir.StatList'> 140422646604240 {
			parent = 140422646611728
			}
		}
	}
	defs: 	<class 'ir.DefinitionList'> 140422647882288 {
	parent = 140422646601984
	}
} 

<class 'ir.LoadImmStat'> 140422646602080
<class 'ir.StatList'> 140422646602752
Flattening 140422646602752 into 140422646602656
<class 'ir.StoreStat'> 140422646604576
<class 'ir.StatList'> 140422646602656
Flattening 140422646602656 into 140422647882432
<class 'ir.LoadImmStat'> 140422646606064
<class 'ir.StatList'> 140422646606160
Flattening 140422646606160 into 140422646606256
<class 'ir.StoreStat'> 140422646606304
<class 'ir.StatList'> 140422646606256
Flattening 140422646606256 into 140422646611728
<class 'ir.LoadStat'> 140422646605392
<class 'ir.StatList'> 140422646605440
Flattening 140422646605440 into 140422646605824
<class 'ir.LoadImmStat'> 140422646605680
<class 'ir.StatList'> 140422646605728
Flattening 140422646605728 into 140422646605824
<class 'ir.BinStat'> 140422646605920
<class 'ir.StatList'> 140422646605824
Flattening 140422646605824 into 140422646611728
<class 'ir.BranchStat'> 140422646611680
<class 'ir.LoadStat'> 140422646608848
<class 'ir.StatList'> 140422646608896
Flattening 140422646608896 into 140422646609280
<class 'ir.LoadImmStat'> 140422646609136
<class 'ir.StatList'> 140422646609184
Flattening 140422646609184 into 140422646609280
<class 'ir.BinStat'> 140422646609376
<class 'ir.StatList'> 140422646609280
Flattening 140422646609280 into 140422646609520
<class 'ir.StoreStat'> 140422646609568
<class 'ir.StatList'> 140422646609520
Flattening 140422646609520 into 140422646611344
<class 'ir.LoadStat'> 140422646607216
<class 'ir.StatList'> 140422646607264
Flattening 140422646607264 into 140422646608608
<class 'ir.LoadStat'> 140422646607504
<class 'ir.StatList'> 140422646607552
Flattening 140422646607552 into 140422646607936
<class 'ir.LoadImmStat'> 140422646607792
<class 'ir.StatList'> 140422646607840
Flattening 140422646607840 into 140422646607936
<class 'ir.BinStat'> 140422646608032
<class 'ir.StatList'> 140422646607936
Flattening 140422646607936 into 140422646608368
<class 'ir.LoadImmStat'> 140422646608224
<class 'ir.StatList'> 140422646608272
Flattening 140422646608272 into 140422646608368
<class 'ir.BinStat'> 140422646608464
<class 'ir.StatList'> 140422646608368
Flattening 140422646608368 into 140422646608608
<class 'ir.BinStat'> 140422646608704
<class 'ir.StatList'> 140422646608608
Flattening 140422646608608 into 140422646611344
<class 'ir.BranchStat'> 140422646611296
<class 'ir.LoadStat'> 140422646609664
<class 'ir.StatList'> 140422646609712
Flattening 140422646609712 into 140422646610144
<class 'ir.LoadImmStat'> 140422646610000
<class 'ir.StatList'> 140422646610048
Flattening 140422646610048 into 140422646610144
<class 'ir.BinStat'> 140422646610240
<class 'ir.StatList'> 140422646610144
Flattening 140422646610144 into 140422646610384
<class 'ir.StoreStat'> 140422646610432
<class 'ir.StatList'> 140422646610384
Flattening 140422646610384 into 140422646600976
<class 'ir.LoadStat'> 140422646610672
<class 'ir.StatList'> 140422646610912
Flattening 140422646610912 into 140422646611008
<class 'ir.PrintCommand'> 140422646610768
<class 'ir.StatList'> 140422646611008
Flattening 140422646611008 into 140422646600976
<class 'ir.StatList'> 140422646600976
Flattening 140422646600976 into 140422646611344
<class 'ir.LoadStat'> 140422646606496
<class 'ir.StatList'> 140422646606400
Flattening 140422646606400 into 140422646606832
<class 'ir.LoadImmStat'> 140422646606688
<class 'ir.StatList'> 140422646606736
Flattening 140422646606736 into 140422646606832
<class 'ir.BinStat'> 140422646606928
<class 'ir.StatList'> 140422646606832
Flattening 140422646606832 into 140422646607072
<class 'ir.StoreStat'> 140422646607120
<class 'ir.StatList'> 140422646607072
Flattening 140422646607072 into 140422646611344
<class 'ir.BranchStat'> 140422646611248
<class 'ir.EmptyStat'> 140422646611200
<class 'ir.StatList'> 140422646603808
Flattening 140422646603808 into 140422646611344
<class 'ir.StatList'> 140422646611344
Flattening 140422646611344 into 140422646611728
<class 'ir.LoadStat'> 140422646604336
<class 'ir.StatList'> 140422646604432
Flattening 140422646604432 into 140422646605008
<class 'ir.LoadImmStat'> 140422646604864
<class 'ir.StatList'> 140422646604912
Flattening 140422646604912 into 140422646605008
<class 'ir.BinStat'> 140422646605104
<class 'ir.StatList'> 140422646605008
Flattening 140422646605008 into 140422646605248
<class 'ir.StoreStat'> 140422646605296
<class 'ir.StatList'> 140422646605248
Flattening 140422646605248 into 140422646611728
<class 'ir.BranchStat'> 140422646611632
<class 'ir.EmptyStat'> 140422646611536
<class 'ir.StatList'> 140422646604240
Flattening 140422646604240 into 140422646611728
<class 'ir.StatList'> 140422646611728
Flattening 140422646611728 into 140422647882432
<class 'ir.StatList'> 140422647882432
Not flattening 140422647882432 into 140422646601984 of type <class 'ir.Block'>
<class 'ir.DefinitionList'> 140422647882288
<class 'ir.Block'> 140422646601984

 <class 'ir.Block'> 140422646601984 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140422647882432 {
	parent = 140422646601984
		children:
		reg int t0 <- 0
		global int x <- reg int t0
		reg int t7 <- 0
		auto int tmp_variable_for_strip_mining <- reg int t7
		label3: <class 'ir.EmptyStat'> 140422646599680 {
		parent = 140422647882432
		}
		reg int t4 <- auto int tmp_variable_for_strip_mining
		reg int t5 <- 2
		reg int32_t t6 <- reg int t4 lss reg int t5
		branch on not reg int32_t t6 to auto label label4
		reg int t18 <- auto int tmp_variable_for_strip_mining
		reg int t19 <- 4
		reg int32_t t20 <- reg int t18 times reg int t19
		global int i <- reg int32_t t20
		label1: <class 'ir.EmptyStat'> 140422646603040 {
		parent = 140422647882432
		}
		reg int t11 <- global int i
		reg int t12 <- auto int tmp_variable_for_strip_mining
		reg int t13 <- 4
		reg int32_t t14 <- reg int t12 times reg int t13
		reg int t15 <- 4
		reg int32_t t16 <- reg int32_t t14 plus reg int t15
		reg int32_t t17 <- reg int t11 lss reg int32_t t16
		branch on not reg int32_t t17 to auto label label2
		reg int t21 <- global int x
		reg int t22 <- 1
		reg int32_t t23 <- reg int t21 plus reg int t22
		global int x <- reg int32_t t23
		reg int t25 <- global int i
		print reg int t25
		reg int t8 <- global int i
		reg int t9 <- 1
		reg int32_t t10 <- reg int t8 plus reg int t9
		global int i <- reg int32_t t10
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140422646611200 {
		parent = 140422647882432
		}
		reg int t1 <- auto int tmp_variable_for_strip_mining
		reg int t2 <- 1
		reg int32_t t3 <- reg int t1 plus reg int t2
		auto int tmp_variable_for_strip_mining <- reg int32_t t3
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140422646611536 {
		parent = 140422647882432
		}
	}
	defs: 	<class 'ir.DefinitionList'> 140422647882288 {
	parent = 140422646601984
	}
} 

navigating children of <class 'ir.StatList'> 140422647882432 40
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984


DATALAYOUT



 <class 'ir.Block'> 140422646601984 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140422647882432 {
	parent = 140422646601984
		children:
		reg int t0 <- 0
		global int x; _g_x: def byte 4 <- reg int t0
		reg int t7 <- 0
		auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t7
		label3: <class 'ir.EmptyStat'> 140422646599680 {
		parent = 140422647882432
		}
		reg int t4 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t5 <- 2
		reg int32_t t6 <- reg int t4 lss reg int t5
		branch on not reg int32_t t6 to auto label label4
		reg int t18 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t19 <- 4
		reg int32_t t20 <- reg int t18 times reg int t19
		global int i; _g_i: def byte 4 <- reg int32_t t20
		label1: <class 'ir.EmptyStat'> 140422646603040 {
		parent = 140422647882432
		}
		reg int t11 <- global int i; _g_i: def byte 4
		reg int t12 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t13 <- 4
		reg int32_t t14 <- reg int t12 times reg int t13
		reg int t15 <- 4
		reg int32_t t16 <- reg int32_t t14 plus reg int t15
		reg int32_t t17 <- reg int t11 lss reg int32_t t16
		branch on not reg int32_t t17 to auto label label2
		reg int t21 <- global int x; _g_x: def byte 4
		reg int t22 <- 1
		reg int32_t t23 <- reg int t21 plus reg int t22
		global int x; _g_x: def byte 4 <- reg int32_t t23
		reg int t25 <- global int i; _g_i: def byte 4
		print reg int t25
		reg int t8 <- global int i; _g_i: def byte 4
		reg int t9 <- 1
		reg int32_t t10 <- reg int t8 plus reg int t9
		global int i; _g_i: def byte 4 <- reg int32_t t10
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140422646611200 {
		parent = 140422647882432
		}
		reg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t2 <- 1
		reg int32_t t3 <- reg int t1 plus reg int t2
		auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t3
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140422646611536 {
		parent = 140422647882432
		}
	}
	defs: 	<class 'ir.DefinitionList'> 140422647882288 {
	parent = 140422646601984
	}
} 

navigating children of <class 'ir.StatList'> 140422647882432 40
successfully navigated attr  body  of <class 'ir.Block'> 140422646601984
successfully navigated attr  defs  of <class 'ir.Block'> 140422646601984
Liveness sets
140422646600784 [label="BB140422646600784{\nreg int t0 <- 0\nglobal int x; _g_x: def byte 4 <- reg int t0\nreg int t7 <- 0\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t7}"];
140422646600784 -> 140422646602896 [label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];

gen: set()
kill: {reg int t7, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t0}
live_in: set()
live_out: set()
140422646602896 [label="BB140422646602896{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140422646599680 {
parent = 140422647882432
}\nreg int t4 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t5 <- 2\nreg int32_t t6 <- reg int t4 lss reg int t5\nbranch on not reg int32_t t6 to auto label label4}"];
140422646602896 -> 140422646600688 [label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];
140422646602896 -> 140422646602272 [style=dashed,label="set()"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
kill: {reg int t4, reg int32_t t6, reg int t5}
live_in: {global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
live_out: {global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
140422646600688 [label="BB140422646600688{\nreg int t18 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t19 <- 4\nreg int32_t t20 <- reg int t18 times reg int t19\nglobal int i; _g_i: def byte 4 <- reg int32_t t20}"];
140422646600688 -> 140422646600832 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
kill: {reg int t18, reg int t19, reg int32_t t20, global int i; _g_i: def byte 4}
live_in: {global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
live_out: {global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
140422646600832 [label="BB140422646600832{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140422646603040 {
parent = 140422647882432
}\nreg int t11 <- global int i; _g_i: def byte 4\nreg int t12 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t13 <- 4\nreg int32_t t14 <- reg int t12 times reg int t13\nreg int t15 <- 4\nreg int32_t t16 <- reg int32_t t14 plus reg int t15\nreg int32_t t17 <- reg int t11 lss reg int32_t t16\nbranch on not reg int32_t t17 to auto label label2}"];
140422646600832 -> 140422646602368 [label="{auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];
140422646600832 -> 140422646603280 [style=dashed,label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4}
kill: {reg int32_t t16, reg int t11, reg int t15, reg int t12, reg int32_t t17, reg int t13, reg int32_t t14}
live_in: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
live_out: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
140422646602368 [label="BB140422646602368{\nreg int t21 <- global int x; _g_x: def byte 4\nreg int t22 <- 1\nreg int32_t t23 <- reg int t21 plus reg int t22\nglobal int x; _g_x: def byte 4 <- reg int32_t t23\nreg int t25 <- global int i; _g_i: def byte 4\nprint reg int t25\nreg int t8 <- global int i; _g_i: def byte 4\nreg int t9 <- 1\nreg int32_t t10 <- reg int t8 plus reg int t9\nglobal int i; _g_i: def byte 4 <- reg int32_t t10\nbranch  to auto label label1}"];
140422646602368 -> 140422646600832 [style=dashed,label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];

gen: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
kill: {reg int t22, reg int32_t t10, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, reg int t8, reg int t9, reg int32_t t23, reg int t25, reg int t21}
live_in: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
live_out: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
140422646603280 [label="BB140422646603280{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140422646611200 {
parent = 140422647882432
}\nreg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t2 <- 1\nreg int32_t t3 <- reg int t1 plus reg int t2\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t3\nbranch  to auto label label3}"];
140422646603280 -> 140422646602896 [style=dashed,label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
kill: {reg int32_t t3, reg int t2, reg int t1, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
live_in: {global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
live_out: {global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
140422646602272 [label="BB140422646602272{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140422646611536 {
parent = 140422647882432
}}"];
140422646602272 -> exit140422647908976 [label="set()"];

gen: set()
kill: set()
live_in: set()
live_out: set()

Instruction liveness
BASIC BLOCK:
140422646600784 [label="BB140422646600784{\nreg int t0 <- 0\nglobal int x; _g_x: def byte 4 <- reg int t0\nreg int t7 <- 0\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t7}"];
140422646600784 -> 140422646602896 [label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];


inst=reg int t0 <- 0                                                                  live_in=set()                                                                                                                                                                                                    live_out={reg int t0}                                                                    
inst=global int x; _g_x: def byte 4 <- reg int t0                                     live_in={reg int t0}                                                                                                                                                                                             live_out={global int x; _g_x: def byte 4}                                                
inst=reg int t7 <- 0                                                                  live_in={global int x; _g_x: def byte 4}                                                                                                                                                                         live_out={reg int t7, global int x; _g_x: def byte 4}                                    
inst=auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t7 live_in={reg int t7, global int x; _g_x: def byte 4}                                                                                                                                                             live_out={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
BASIC BLOCK:
140422646602896 [label="BB140422646602896{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140422646599680 {
parent = 140422647882432
}\nreg int t4 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t5 <- 2\nreg int32_t t6 <- reg int t4 lss reg int t5\nbranch on not reg int32_t t6 to auto label label4}"];
140422646602896 -> 140422646600688 [label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];
140422646602896 -> 140422646602272 [style=dashed,label="set()"];


inst=label3: <class 'ir.EmptyStat'> 140422646599680 {
parent = 140422647882432
}      live_in={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                                   live_out={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int t4 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                                   live_out={reg int t4, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int t5 <- 2                                                                  live_in={reg int t4, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                       live_out={reg int t4, global int x; _g_x: def byte 4, reg int t5, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int32_t t6 <- reg int t4 lss reg int t5                                      live_in={reg int t4, global int x; _g_x: def byte 4, reg int t5, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                           live_out={global int x; _g_x: def byte 4, reg int32_t t6, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=branch on not reg int32_t t6 to auto label label4                                live_in={global int x; _g_x: def byte 4, reg int32_t t6, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                   live_out={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
BASIC BLOCK:
140422646600688 [label="BB140422646600688{\nreg int t18 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t19 <- 4\nreg int32_t t20 <- reg int t18 times reg int t19\nglobal int i; _g_i: def byte 4 <- reg int32_t t20}"];
140422646600688 -> 140422646600832 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];


inst=reg int t18 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                                   live_out={reg int t18, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int t19 <- 4                                                                 live_in={reg int t18, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                      live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t18, global int x; _g_x: def byte 4, reg int t19}
inst=reg int32_t t20 <- reg int t18 times reg int t19                                 live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t18, global int x; _g_x: def byte 4, reg int t19}                                                         live_out={global int x; _g_x: def byte 4, reg int32_t t20, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=global int i; _g_i: def byte 4 <- reg int32_t t20                                live_in={global int x; _g_x: def byte 4, reg int32_t t20, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                  live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
BASIC BLOCK:
140422646600832 [label="BB140422646600832{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140422646603040 {
parent = 140422647882432
}\nreg int t11 <- global int i; _g_i: def byte 4\nreg int t12 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t13 <- 4\nreg int32_t t14 <- reg int t12 times reg int t13\nreg int t15 <- 4\nreg int32_t t16 <- reg int32_t t14 plus reg int t15\nreg int32_t t17 <- reg int t11 lss reg int32_t t16\nbranch on not reg int32_t t17 to auto label label2}"];
140422646600832 -> 140422646602368 [label="{auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];
140422646600832 -> 140422646603280 [style=dashed,label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];


inst=label1: <class 'ir.EmptyStat'> 140422646603040 {
parent = 140422647882432
}      live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                   live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
inst=reg int t11 <- global int i; _g_i: def byte 4                                    live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                   live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int t11, global int i; _g_i: def byte 4}
inst=reg int t12 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int t11, global int i; _g_i: def byte 4}                                      live_out={reg int t11, reg int t12, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
inst=reg int t13 <- 4                                                                 live_in={reg int t11, reg int t12, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                         live_out={reg int t11, reg int t12, reg int t13, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4}
inst=reg int32_t t14 <- reg int t12 times reg int t13                                 live_in={reg int t11, reg int t12, reg int t13, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4}            live_out={reg int t11, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int32_t t14, global int i; _g_i: def byte 4}
inst=reg int t15 <- 4                                                                 live_in={reg int t11, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int32_t t14, global int i; _g_i: def byte 4}                     live_out={reg int t11, reg int t15, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int32_t t14, global int i; _g_i: def byte 4}
inst=reg int32_t t16 <- reg int32_t t14 plus reg int t15                              live_in={reg int t11, reg int t15, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int32_t t14, global int i; _g_i: def byte 4}        live_out={reg int t11, reg int32_t t16, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4}
inst=reg int32_t t17 <- reg int t11 lss reg int32_t t16                               live_in={reg int t11, reg int32_t t16, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4}                     live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, reg int32_t t17}
inst=branch on not reg int32_t t17 to auto label label2                               live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, reg int32_t t17}                                  live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
BASIC BLOCK:
140422646602368 [label="BB140422646602368{\nreg int t21 <- global int x; _g_x: def byte 4\nreg int t22 <- 1\nreg int32_t t23 <- reg int t21 plus reg int t22\nglobal int x; _g_x: def byte 4 <- reg int32_t t23\nreg int t25 <- global int i; _g_i: def byte 4\nprint reg int t25\nreg int t8 <- global int i; _g_i: def byte 4\nreg int t9 <- 1\nreg int32_t t10 <- reg int t8 plus reg int t9\nglobal int i; _g_i: def byte 4 <- reg int32_t t10\nbranch  to auto label label1}"];
140422646602368 -> 140422646600832 [style=dashed,label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];


inst=reg int t21 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                   live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4, reg int t21}
inst=reg int t22 <- 1                                                                 live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4, reg int t21}                                                                      live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t22, global int i; _g_i: def byte 4, reg int t21}
inst=reg int32_t t23 <- reg int t21 plus reg int t22                                  live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t22, global int i; _g_i: def byte 4, reg int t21}                                                         live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4, reg int32_t t23}
inst=global int x; _g_x: def byte 4 <- reg int32_t t23                                live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4, reg int32_t t23}                                                                  live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
inst=reg int t25 <- global int i; _g_i: def byte 4                                    live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                   live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int t25, global int i; _g_i: def byte 4}
inst=print reg int t25                                                                live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int t25, global int i; _g_i: def byte 4}                                      live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
inst=reg int t8 <- global int i; _g_i: def byte 4                                     live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                   live_out={reg int t8, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int t9 <- 1                                                                  live_in={reg int t8, global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                       live_out={reg int t8, global int x; _g_x: def byte 4, reg int t9, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int32_t t10 <- reg int t8 plus reg int t9                                    live_in={reg int t8, global int x; _g_x: def byte 4, reg int t9, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                           live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int32_t t10}
inst=global int i; _g_i: def byte 4 <- reg int32_t t10                                live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int32_t t10}                                                                  live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
inst=branch  to auto label label1                                                     live_in={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                   live_out={auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
BASIC BLOCK:
140422646603280 [label="BB140422646603280{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140422646611200 {
parent = 140422647882432
}\nreg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t2 <- 1\nreg int32_t t3 <- reg int t1 plus reg int t2\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t3\nbranch  to auto label label3}"];
140422646603280 -> 140422646602896 [style=dashed,label="{global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}"];


inst=label2: <class 'ir.EmptyStat'> 140422646611200 {
parent = 140422647882432
}      live_in={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                                   live_out={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=reg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                                   live_out={global int x; _g_x: def byte 4, reg int t1}                                    
inst=reg int t2 <- 1                                                                  live_in={global int x; _g_x: def byte 4, reg int t1}                                                                                                                                                             live_out={reg int t2, global int x; _g_x: def byte 4, reg int t1}                        
inst=reg int32_t t3 <- reg int t1 plus reg int t2                                     live_in={reg int t2, global int x; _g_x: def byte 4, reg int t1}                                                                                                                                                 live_out={global int x; _g_x: def byte 4, reg int32_t t3}                                
inst=auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t3 live_in={global int x; _g_x: def byte 4, reg int32_t t3}                                                                                                                                                         live_out={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
inst=branch  to auto label label3                                                     live_in={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}                                                                                   live_out={global int x; _g_x: def byte 4, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
BASIC BLOCK:
140422646602272 [label="BB140422646602272{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140422646611536 {
parent = 140422647882432
}}"];
140422646602272 -> exit140422647908976 [label="set()"];


inst=label4: <class 'ir.EmptyStat'> 140422646611536 {
parent = 140422647882432
}      live_in=set()                                                                                                                                                                                                    live_out=set()                                                                           


REGALLOC


LIVENESS INTERVALS:
[{'var': reg int t0, 'interv': range(0, 1)}, {'var': reg int t7, 'interv': range(2, 3)}, {'var': reg int t4, 'interv': range(5, 7)}, {'var': reg int t5, 'interv': range(6, 7)}, {'var': reg int32_t t6, 'interv': range(7, 8)}, {'var': reg int t18, 'interv': range(9, 11)}, {'var': reg int t19, 'interv': range(10, 11)}, {'var': reg int32_t t20, 'interv': range(11, 12)}, {'var': reg int t11, 'interv': range(14, 20)}, {'var': reg int t12, 'interv': range(15, 17)}, {'var': reg int t13, 'interv': range(16, 17)}, {'var': reg int32_t t14, 'interv': range(17, 19)}, {'var': reg int t15, 'interv': range(18, 19)}, {'var': reg int32_t t16, 'interv': range(19, 20)}, {'var': reg int32_t t17, 'interv': range(20, 21)}, {'var': reg int t21, 'interv': range(22, 24)}, {'var': reg int t22, 'interv': range(23, 24)}, {'var': reg int32_t t23, 'interv': range(24, 25)}, {'var': reg int t25, 'interv': range(26, 27)}, {'var': reg int t8, 'interv': range(28, 30)}, {'var': reg int t9, 'interv': range(29, 30)}, {'var': reg int32_t t10, 'interv': range(30, 31)}, {'var': reg int t1, 'interv': range(34, 36)}, {'var': reg int t2, 'interv': range(35, 36)}, {'var': reg int32_t t3, 'interv': range(36, 37)}]
vartoreg = {reg int t0: 0, reg int t7: 1, reg int t4: 2, reg int t5: 3, reg int32_t t6: 4, reg int t18: 5, reg int t19: 6, reg int32_t t20: 7, reg int t11: 8, reg int t12: 0, reg int t13: 1, reg int32_t t14: 0, reg int t15: 2, reg int32_t t16: 3, reg int32_t t17: 4, reg int t21: 5, reg int t22: 6, reg int32_t t23: 7, reg int t25: 3, reg int t8: 8, reg int t9: 1, reg int32_t t10: 0, reg int t1: 2, reg int t2: 1, reg int32_t t3: 4}


CODEGEN


	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_i, 4
	.comm _g_tmp_variable_for_strip_mining, 4
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 140422647882432 type <class 'ir.StatList'>
	mov r0, #0
	ldr r12, .const0
	str r0, [r12]
	mov r1, #0
	ldr r12, .const1
	str r1, [r12]
label3:
	@ emptystat
	ldr r12, .const2
	ldr r2, [r12]
	mov r3, #2
	cmp r2, r3
	movlt r4, #1
	movge r4, #0
	tst r4, r4
	beq label4
	ldr r12, .const3
	ldr r5, [r12]
	mov r6, #4
	mul r7, r5, r6
	ldr r12, .const4
	str r7, [r12]
label1:
	@ emptystat
	ldr r12, .const5
	ldr r8, [r12]
	ldr r12, .const6
	ldr r0, [r12]
	mov r1, #4
	mul r0, r0, r1
	mov r2, #4
	add r3, r0, r2
	cmp r8, r3
	movlt r4, #1
	movge r4, #0
	tst r4, r4
	beq label2
	ldr r12, .const7
	ldr r5, [r12]
	mov r6, #1
	add r7, r5, r6
	ldr r12, .const8
	str r7, [r12]
	ldr r12, .const9
	ldr r3, [r12]
	push {r0, r1, r2, r3}
	mov r0, r3
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const10
	ldr r8, [r12]
	mov r1, #1
	add r0, r8, r1
	ldr r12, .const11
	str r0, [r12]
	b label1
label2:
	@ emptystat
	ldr r12, .const12
	ldr r2, [r12]
	mov r1, #1
	add r4, r2, r1
	ldr r12, .const13
	str r4, [r12]
	b label3
label4:
	@ emptystat
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const0:
	.word _g_x
.const1:
	.word _g_tmp_variable_for_strip_mining
.const2:
	.word _g_tmp_variable_for_strip_mining
.const3:
	.word _g_tmp_variable_for_strip_mining
.const4:
	.word _g_i
.const5:
	.word _g_i
.const6:
	.word _g_tmp_variable_for_strip_mining
.const7:
	.word _g_x
.const8:
	.word _g_x
.const9:
	.word _g_i
.const10:
	.word _g_i
.const11:
	.word _g_i
.const12:
	.word _g_tmp_variable_for_strip_mining
.const13:
	.word _g_tmp_variable_for_strip_mining

