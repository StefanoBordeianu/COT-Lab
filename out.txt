['./main.py']
start <function Parser.program at 0x7eff0e71fac0>
getsym: varsym var
start <function Parser.block at 0x7eff0e71f760>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7eff0e71f9a0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7eff0e71f9a0>
accepting comma == comma
getsym: ident i
start <function Parser.vardef at 0x7eff0e71f9a0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7eff0e71f9a0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7eff0e71f640>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 139633926068864
start <function Parser.statement at 0x7eff0e71f640>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7eff0e71f400>
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
end <function Parser.expression at 0x7eff0e71f400>
end <function Parser.statement at 0x7eff0e71f640>
StatList: appending 139633924253792 of type <class 'ir.AssignStat'> to 139633926068864
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7eff0e71f640>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident i
accepting ident == ident
getsym: comma ,
Looking up i
expecting comma
accepting comma == comma
getsym: number 0
start <function Parser.expression at 0x7eff0e71f400>
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == number
accepting number == number
getsym: uptosym upto
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
end <function Parser.expression at 0x7eff0e71f400>
accepting downtosym == uptosym
expecting uptosym
accepting uptosym == uptosym
getsym: number 10
start <function Parser.expression at 0x7eff0e71f400>
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == number
accepting number == number
getsym: comma ,
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
end <function Parser.expression at 0x7eff0e71f400>
expecting comma
accepting comma == comma
getsym: ident i
start <function Parser.expression at 0x7eff0e71f400>
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == ident
getsym: plus +
Looking up i
Looking up i
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
getsym: number 1
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
end <function Parser.expression at 0x7eff0e71f400>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7eff0e71f640>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 139633924254224
start <function Parser.statement at 0x7eff0e71f640>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7eff0e71f400>
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
getsym: number 1
start <function Parser.term at 0x7eff0e71f2e0>
start <function Parser.factor at 0x7eff0e71f1c0>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7eff0e71f1c0>
end <function Parser.term at 0x7eff0e71f2e0>
end <function Parser.expression at 0x7eff0e71f400>
end <function Parser.statement at 0x7eff0e71f640>
StatList: appending 139633924254608 of type <class 'ir.AssignStat'> to 139633924254224
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 139633924254224 : [ 139633924254608 ]
end <function Parser.statement at 0x7eff0e71f640>
end <function Parser.statement at 0x7eff0e71f640>
StatList: appending 139633924254656 of type <class 'ir.ForStat'> to 139633926068864
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: period .
StatList 139633926068864 : [ 139633924253792 139633924254656 ]
end <function Parser.statement at 0x7eff0e71f640>
end <function Parser.block at 0x7eff0e71f760>
expecting period
accepting period == period
end <function Parser.program at 0x7eff0e71fac0>

 <class 'ir.Block'> 139633924254704 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 139633926068864 {
	parent = 139633924254704
		children:
		<class 'ir.AssignStat'> 139633924253792 {
		parent = 139633926068864
			offset: 	None
			symbol: 	global int x
			expr: 	<class 'ir.Const'> 139633926070832 {
			parent = 139633924253792
				value: 	1
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 139633924254656 {
		parent = 139633926068864
			start_assign: 	<class 'ir.AssignStat'> 139633924254752 {
			parent = 139633924254656
				offset: 	None
				symbol: 	global int i
				expr: 	<class 'ir.Const'> 139633926068816 {
				parent = 139633924254752
					value: 	0
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 139633926070928 {
			parent = 139633924254656
				offset: 	None
				symbol: 	global int i
				expr: 	<class 'ir.BinExpr'> 139633924254128 {
				parent = 139633926070928
					children:
					'plus'
					<class 'ir.Var'> 139633924253936 {
					parent = 139633924254128
						symbol: 	global int i
					}
					<class 'ir.Const'> 139633924254032 {
					parent = 139633924254128
						value: 	1
						symbol: 	None
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 139633924254896 {
			parent = 139633924254656
				children:
				'lss'
				<class 'ir.Var'> 139633924254800 {
				parent = 139633924254896
					symbol: 	global int i
				}
				<class 'ir.Const'> 139633924253840 {
				parent = 139633924254896
					value: 	10
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 139633924254224 {
			parent = 139633924254656
				children:
				<class 'ir.AssignStat'> 139633924254608 {
				parent = 139633924254224
					offset: 	None
					symbol: 	global int x
					expr: 	<class 'ir.BinExpr'> 139633924254512 {
					parent = 139633924254608
						children:
						'plus'
						<class 'ir.Var'> 139633924254320 {
						parent = 139633924254512
							symbol: 	global int x
						}
						<class 'ir.Const'> 139633924254416 {
						parent = 139633924254512
							value: 	1
							symbol: 	None
						}
					}
				}
			}
		}
	}
	defs: 	<class 'ir.DefinitionList'> 139633926068720 {
	parent = 139633924254704
	}
} 

navigating children of <class 'ir.StatList'> 139633926068864 2
<class 'ir.Const'> 139633926070832
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924253792
<class 'ir.AssignStat'> 139633924253792
<class 'ir.Const'> 139633926068816
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924254752
<class 'ir.AssignStat'> 139633924254752
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.BinExpr'> 139633924254128 3
<class 'ir.Var'> 139633924253936
<class 'ir.Const'> 139633924254032
<class 'ir.BinExpr'> 139633924254128
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633926070928
<class 'ir.AssignStat'> 139633926070928
successfully navigated attr  step  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.BinExpr'> 139633924254896 3
<class 'ir.Var'> 139633924254800
<class 'ir.Const'> 139633924253840
<class 'ir.BinExpr'> 139633924254896
successfully navigated attr  cond  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.StatList'> 139633924254224 1
navigating children of <class 'ir.BinExpr'> 139633924254512 3
<class 'ir.Var'> 139633924254320
<class 'ir.Const'> 139633924254416
<class 'ir.BinExpr'> 139633924254512
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924254608
<class 'ir.AssignStat'> 139633924254608
<class 'ir.StatList'> 139633924254224
StatList 139633924254224 : [ 139633924254608 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 139633924254656
<class 'ir.ForStat'> 139633924254656
<class 'ir.StatList'> 139633926068864
StatList 139633926068864 : [ 139633924253792 139633924254656 ]
successfully navigated attr  body  of <class 'ir.Block'> 139633924254704
<class 'ir.DefinitionList'> 139633926068720
successfully navigated attr  defs  of <class 'ir.Block'> 139633924254704
<class 'ir.Block'> 139633924254704
navigating children of <class 'ir.StatList'> 139633926068864 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924253792
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924254752
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.BinExpr'> 139633924254128 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633926070928
successfully navigated attr  step  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.BinExpr'> 139633924254896 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.StatList'> 139633924254224 1
navigating children of <class 'ir.BinExpr'> 139633924254512 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924254608
successfully navigated attr  body  of <class 'ir.ForStat'> 139633924254656
successfully navigated attr  body  of <class 'ir.Block'> 139633924254704
successfully navigated attr  defs  of <class 'ir.Block'> 139633924254704
<class 'ir.Const'> 139633926070832 -> <class 'ir.AssignStat'> 139633924253792
<class 'ir.AssignStat'> 139633924253792 -> <class 'ir.StatList'> 139633926068864
<class 'ir.Const'> 139633926068816 -> <class 'ir.AssignStat'> 139633924254752
<class 'ir.AssignStat'> 139633924254752 -> <class 'ir.ForStat'> 139633924254656
<class 'ir.Var'> 139633924253936 -> <class 'ir.BinExpr'> 139633924254128
<class 'ir.Const'> 139633924254032 -> <class 'ir.BinExpr'> 139633924254128
<class 'ir.BinExpr'> 139633924254128 -> <class 'ir.AssignStat'> 139633926070928
<class 'ir.AssignStat'> 139633926070928 -> <class 'ir.ForStat'> 139633924254656
<class 'ir.Var'> 139633924254800 -> <class 'ir.BinExpr'> 139633924254896
<class 'ir.Const'> 139633924253840 -> <class 'ir.BinExpr'> 139633924254896
<class 'ir.BinExpr'> 139633924254896 -> <class 'ir.ForStat'> 139633924254656
<class 'ir.Var'> 139633924254320 -> <class 'ir.BinExpr'> 139633924254512
<class 'ir.Const'> 139633924254416 -> <class 'ir.BinExpr'> 139633924254512
<class 'ir.BinExpr'> 139633924254512 -> <class 'ir.AssignStat'> 139633924254608
<class 'ir.AssignStat'> 139633924254608 -> <class 'ir.StatList'> 139633924254224
<class 'ir.StatList'> 139633924254224 -> <class 'ir.ForStat'> 139633924254656
<class 'ir.ForStat'> 139633924254656 -> <class 'ir.StatList'> 139633926068864
<class 'ir.StatList'> 139633926068864 -> <class 'ir.Block'> 139633924254704
<class 'ir.DefinitionList'> 139633926068720 -> <class 'ir.Block'> 139633924254704
<class 'ir.Block'> 139633924254704 -> <class 'NoneType'> 94897423127520

Total nodes in IR: 20 

navigating children of <class 'ir.StatList'> 139633926068864 2
StatList : new 139633924255232
Lowering <class 'ir.Const'> 139633926070832
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924253792
StatList : new 139633924255328
Lowering <class 'ir.AssignStat'> 139633924253792
StatList : new 139633924255472
Lowering <class 'ir.Const'> 139633926068816
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924254752
StatList : new 139633924255568
Lowering <class 'ir.AssignStat'> 139633924254752
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.BinExpr'> 139633924254128 3
StatList : new 139633924255856
Lowering <class 'ir.Var'> 139633924253936
StatList : new 139633924256048
Lowering <class 'ir.Const'> 139633924254032
StatList : new 139633924256288
Lowering <class 'ir.BinExpr'> 139633924254128
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633926070928
StatList : new 139633924256384
Lowering <class 'ir.AssignStat'> 139633926070928
successfully navigated attr  step  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.BinExpr'> 139633924254896 3
StatList : new 139633924256672
Lowering <class 'ir.Var'> 139633924254800
StatList : new 139633924256864
Lowering <class 'ir.Const'> 139633924253840
StatList : new 139633924257104
Lowering <class 'ir.BinExpr'> 139633924254896
successfully navigated attr  cond  of <class 'ir.ForStat'> 139633924254656
navigating children of <class 'ir.StatList'> 139633924254224 1
navigating children of <class 'ir.BinExpr'> 139633924254512 3
StatList : new 139633924257392
Lowering <class 'ir.Var'> 139633924254320
StatList : new 139633924257584
Lowering <class 'ir.Const'> 139633924254416
StatList : new 139633924257824
Lowering <class 'ir.BinExpr'> 139633924254512
successfully navigated attr  expr  of <class 'ir.AssignStat'> 139633924254608
StatList : new 139633924257920
Lowering <class 'ir.AssignStat'> 139633924254608
Cannot lower 139633924254224 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 139633924254656
StatList : new 139633924258304
Lowering <class 'ir.ForStat'> 139633924254656
Cannot lower 139633926068864 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 139633924254704
Cannot lower 139633926068720 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 139633924254704
Cannot lower 139633924254704 <class 'ir.Block'> 'Block' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 139633926068864 2
navigating children of <class 'ir.StatList'> 139633924255328 2
navigating children of <class 'ir.StatList'> 139633924255232 1
navigating children of <class 'ir.StatList'> 139633924258304 7
navigating children of <class 'ir.StatList'> 139633924255568 2
navigating children of <class 'ir.StatList'> 139633924255472 1
navigating children of <class 'ir.StatList'> 139633924257104 3
navigating children of <class 'ir.StatList'> 139633924256672 1
navigating children of <class 'ir.StatList'> 139633924256864 1
navigating children of <class 'ir.StatList'> 139633924254224 1
navigating children of <class 'ir.StatList'> 139633924257920 2
navigating children of <class 'ir.StatList'> 139633924257824 3
navigating children of <class 'ir.StatList'> 139633924257392 1
navigating children of <class 'ir.StatList'> 139633924257584 1
navigating children of <class 'ir.StatList'> 139633924256384 2
navigating children of <class 'ir.StatList'> 139633924256288 3
navigating children of <class 'ir.StatList'> 139633924255856 1
navigating children of <class 'ir.StatList'> 139633924256048 1
successfully navigated attr  body  of <class 'ir.Block'> 139633924254704
successfully navigated attr  defs  of <class 'ir.Block'> 139633924254704

 <class 'ir.Block'> 139633924254704 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 139633926068864 {
	parent = 139633924254704
		children:
		<class 'ir.StatList'> 139633924255328 {
		parent = 139633926068864
			children:
			<class 'ir.StatList'> 139633924255232 {
			parent = 139633924255328
				children:
				reg int t0 <- 1
			}
			global int x <- reg int t0
		}
		<class 'ir.StatList'> 139633924258304 {
		parent = 139633926068864
			children:
			<class 'ir.StatList'> 139633924255568 {
			parent = 139633924258304
				children:
				<class 'ir.StatList'> 139633924255472 {
				parent = 139633924255568
					children:
					reg int t1 <- 0
				}
				global int i <- reg int t1
			}
			label1: <class 'ir.StatList'> 139633924257104 {
			parent = 139633924258304
				children:
				<class 'ir.StatList'> 139633924256672 {
				parent = 139633924257104
					children:
					reg int t5 <- global int i
				}
				<class 'ir.StatList'> 139633924256864 {
				parent = 139633924257104
					children:
					reg int t6 <- 10
				}
				reg int32_t t7 <- reg int t5 lss reg int t6
			}
			branch on not reg int32_t t7 to auto label label2
			<class 'ir.StatList'> 139633924254224 {
			parent = 139633924258304
				children:
				<class 'ir.StatList'> 139633924257920 {
				parent = 139633924254224
					children:
					<class 'ir.StatList'> 139633924257824 {
					parent = 139633924257920
						children:
						<class 'ir.StatList'> 139633924257392 {
						parent = 139633924257824
							children:
							reg int t8 <- global int x
						}
						<class 'ir.StatList'> 139633924257584 {
						parent = 139633924257824
							children:
							reg int t9 <- 1
						}
						reg int32_t t10 <- reg int t8 plus reg int t9
					}
					global int x <- reg int32_t t10
				}
			}
			<class 'ir.StatList'> 139633924256384 {
			parent = 139633924258304
				children:
				<class 'ir.StatList'> 139633924256288 {
				parent = 139633924256384
					children:
					<class 'ir.StatList'> 139633924255856 {
					parent = 139633924256288
						children:
						reg int t2 <- global int i
					}
					<class 'ir.StatList'> 139633924256048 {
					parent = 139633924256288
						children:
						reg int t3 <- 1
					}
					reg int32_t t4 <- reg int t2 plus reg int t3
				}
				global int i <- reg int32_t t4
			}
			branch  to auto label label1
			label2: <class 'ir.EmptyStat'> 139633924258160 {
			parent = 139633924258304
			}
		}
	}
	defs: 	<class 'ir.DefinitionList'> 139633926068720 {
	parent = 139633924254704
	}
} 

<class 'ir.LoadImmStat'> 139633924255280
<class 'ir.StatList'> 139633924255232
Flattening 139633924255232 into 139633924255328
<class 'ir.StoreStat'> 139633924255088
<class 'ir.StatList'> 139633924255328
Flattening 139633924255328 into 139633926068864
<class 'ir.LoadImmStat'> 139633924255424
<class 'ir.StatList'> 139633924255472
Flattening 139633924255472 into 139633924255568
<class 'ir.StoreStat'> 139633924255616
<class 'ir.StatList'> 139633924255568
Flattening 139633924255568 into 139633924258304
<class 'ir.LoadStat'> 139633924256528
<class 'ir.StatList'> 139633924256672
Flattening 139633924256672 into 139633924257104
<class 'ir.LoadImmStat'> 139633924256816
<class 'ir.StatList'> 139633924256864
Flattening 139633924256864 into 139633924257104
<class 'ir.BinStat'> 139633924256960
<class 'ir.StatList'> 139633924257104
Flattening 139633924257104 into 139633924258304
<class 'ir.BranchStat'> 139633924258256
<class 'ir.LoadStat'> 139633924257200
<class 'ir.StatList'> 139633924257392
Flattening 139633924257392 into 139633924257824
<class 'ir.LoadImmStat'> 139633924257536
<class 'ir.StatList'> 139633924257584
Flattening 139633924257584 into 139633924257824
<class 'ir.BinStat'> 139633924257680
<class 'ir.StatList'> 139633924257824
Flattening 139633924257824 into 139633924257920
<class 'ir.StoreStat'> 139633924257968
<class 'ir.StatList'> 139633924257920
Flattening 139633924257920 into 139633924254224
<class 'ir.StatList'> 139633924254224
Flattening 139633924254224 into 139633924258304
<class 'ir.LoadStat'> 139633924255712
<class 'ir.StatList'> 139633924255856
Flattening 139633924255856 into 139633924256288
<class 'ir.LoadImmStat'> 139633924256000
<class 'ir.StatList'> 139633924256048
Flattening 139633924256048 into 139633924256288
<class 'ir.BinStat'> 139633924256144
<class 'ir.StatList'> 139633924256288
Flattening 139633924256288 into 139633924256384
<class 'ir.StoreStat'> 139633924256432
<class 'ir.StatList'> 139633924256384
Flattening 139633924256384 into 139633924258304
<class 'ir.BranchStat'> 139633924258208
<class 'ir.EmptyStat'> 139633924258160
<class 'ir.StatList'> 139633924258304
Flattening 139633924258304 into 139633926068864
<class 'ir.StatList'> 139633926068864
Not flattening 139633926068864 into 139633924254704 of type <class 'ir.Block'>
<class 'ir.DefinitionList'> 139633926068720
<class 'ir.Block'> 139633924254704

 <class 'ir.Block'> 139633924254704 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 139633926068864 {
	parent = 139633924254704
		children:
		reg int t0 <- 1
		global int x <- reg int t0
		reg int t1 <- 0
		global int i <- reg int t1
		label1: <class 'ir.EmptyStat'> 139633926068816 {
		parent = 139633926068864
		}
		reg int t5 <- global int i
		reg int t6 <- 10
		reg int32_t t7 <- reg int t5 lss reg int t6
		branch on not reg int32_t t7 to auto label label2
		reg int t8 <- global int x
		reg int t9 <- 1
		reg int32_t t10 <- reg int t8 plus reg int t9
		global int x <- reg int32_t t10
		reg int t2 <- global int i
		reg int t3 <- 1
		reg int32_t t4 <- reg int t2 plus reg int t3
		global int i <- reg int32_t t4
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 139633924258160 {
		parent = 139633926068864
		}
	}
	defs: 	<class 'ir.DefinitionList'> 139633926068720 {
	parent = 139633924254704
	}
} 

navigating children of <class 'ir.StatList'> 139633926068864 19
successfully navigated attr  body  of <class 'ir.Block'> 139633924254704
successfully navigated attr  defs  of <class 'ir.Block'> 139633924254704


DATALAYOUT



 <class 'ir.Block'> 139633924254704 {
                                                                      <<<<<----- BUG? MISSING PARENT
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 139633926068864 {
	parent = 139633924254704
		children:
		reg int t0 <- 1
		global int x; _g_x: def byte 4 <- reg int t0
		reg int t1 <- 0
		global int i; _g_i: def byte 4 <- reg int t1
		label1: <class 'ir.EmptyStat'> 139633926068816 {
		parent = 139633926068864
		}
		reg int t5 <- global int i; _g_i: def byte 4
		reg int t6 <- 10
		reg int32_t t7 <- reg int t5 lss reg int t6
		branch on not reg int32_t t7 to auto label label2
		reg int t8 <- global int x; _g_x: def byte 4
		reg int t9 <- 1
		reg int32_t t10 <- reg int t8 plus reg int t9
		global int x; _g_x: def byte 4 <- reg int32_t t10
		reg int t2 <- global int i; _g_i: def byte 4
		reg int t3 <- 1
		reg int32_t t4 <- reg int t2 plus reg int t3
		global int i; _g_i: def byte 4 <- reg int32_t t4
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 139633924258160 {
		parent = 139633926068864
		}
	}
	defs: 	<class 'ir.DefinitionList'> 139633926068720 {
	parent = 139633924254704
	}
} 

navigating children of <class 'ir.StatList'> 139633926068864 19
successfully navigated attr  body  of <class 'ir.Block'> 139633924254704
successfully navigated attr  defs  of <class 'ir.Block'> 139633924254704
Liveness sets
139633924254032 [label="BB139633924254032{\nreg int t0 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t0\nreg int t1 <- 0\nglobal int i; _g_i: def byte 4 <- reg int t1}"];
139633924254032 -> 139633924254080 [label="{global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}"];

gen: set()
kill: {reg int t0, global int i; _g_i: def byte 4, reg int t1, global int x; _g_x: def byte 4}
live_in: set()
live_out: set()
139633924254080 [label="BB139633924254080{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 139633926068816 {
parent = 139633926068864
}\nreg int t5 <- global int i; _g_i: def byte 4\nreg int t6 <- 10\nreg int32_t t7 <- reg int t5 lss reg int t6\nbranch on not reg int32_t t7 to auto label label2}"];
139633924254080 -> 139633924253744 [label="{global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}"];
139633924254080 -> 139633924254128 [style=dashed,label="set()"];

gen: {global int i; _g_i: def byte 4}
kill: {reg int t6, reg int32_t t7, reg int t5}
live_in: {global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}
live_out: {global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}
139633924253744 [label="BB139633924253744{\nreg int t8 <- global int x; _g_x: def byte 4\nreg int t9 <- 1\nreg int32_t t10 <- reg int t8 plus reg int t9\nglobal int x; _g_x: def byte 4 <- reg int32_t t10\nreg int t2 <- global int i; _g_i: def byte 4\nreg int t3 <- 1\nreg int32_t t4 <- reg int t2 plus reg int t3\nglobal int i; _g_i: def byte 4 <- reg int32_t t4\nbranch  to auto label label1}"];
139633924253744 -> 139633924254080 [style=dashed,label="{global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}"];

gen: {global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}
kill: {reg int t3, reg int32_t t4, global int i; _g_i: def byte 4, reg int32_t t10, reg int t8, reg int t2, reg int t9, global int x; _g_x: def byte 4}
live_in: {global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}
live_out: {global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}
139633924254128 [label="BB139633924254128{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 139633924258160 {
parent = 139633926068864
}}"];
139633924254128 -> exit139633925671280 [label="set()"];

gen: set()
kill: set()
live_in: set()
live_out: set()

Instruction liveness
BASIC BLOCK:
139633924254032 [label="BB139633924254032{\nreg int t0 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t0\nreg int t1 <- 0\nglobal int i; _g_i: def byte 4 <- reg int t1}"];
139633924254032 -> 139633924254080 [label="{global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}"];


inst=reg int t0 <- 1                                                                  live_in=set()                                                                                                                                                                                                    live_out={reg int t0}                                                                    
inst=global int x; _g_x: def byte 4 <- reg int t0                                     live_in={reg int t0}                                                                                                                                                                                             live_out={global int x; _g_x: def byte 4}                                                
inst=reg int t1 <- 0                                                                  live_in={global int x; _g_x: def byte 4}                                                                                                                                                                         live_out={reg int t1, global int x; _g_x: def byte 4}                                    
inst=global int i; _g_i: def byte 4 <- reg int t1                                     live_in={reg int t1, global int x; _g_x: def byte 4}                                                                                                                                                             live_out={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                
BASIC BLOCK:
139633924254080 [label="BB139633924254080{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 139633926068816 {
parent = 139633926068864
}\nreg int t5 <- global int i; _g_i: def byte 4\nreg int t6 <- 10\nreg int32_t t7 <- reg int t5 lss reg int t6\nbranch on not reg int32_t t7 to auto label label2}"];
139633924254080 -> 139633924253744 [label="{global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}"];
139633924254080 -> 139633924254128 [style=dashed,label="set()"];


inst=label1: <class 'ir.EmptyStat'> 139633926068816 {
parent = 139633926068864
}      live_in={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                                                                                                                                         live_out={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                
inst=reg int t5 <- global int i; _g_i: def byte 4                                     live_in={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                                                                                                                                         live_out={global int i; _g_i: def byte 4, reg int t5, global int x; _g_x: def byte 4}    
inst=reg int t6 <- 10                                                                 live_in={global int i; _g_i: def byte 4, reg int t5, global int x; _g_x: def byte 4}                                                                                                                             live_out={reg int t6, global int i; _g_i: def byte 4, reg int t5, global int x; _g_x: def byte 4}
inst=reg int32_t t7 <- reg int t5 lss reg int t6                                      live_in={reg int t6, global int i; _g_i: def byte 4, reg int t5, global int x; _g_x: def byte 4}                                                                                                                 live_out={reg int32_t t7, global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}
inst=branch on not reg int32_t t7 to auto label label2                                live_in={reg int32_t t7, global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                                                                                                                         live_out={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                
BASIC BLOCK:
139633924253744 [label="BB139633924253744{\nreg int t8 <- global int x; _g_x: def byte 4\nreg int t9 <- 1\nreg int32_t t10 <- reg int t8 plus reg int t9\nglobal int x; _g_x: def byte 4 <- reg int32_t t10\nreg int t2 <- global int i; _g_i: def byte 4\nreg int t3 <- 1\nreg int32_t t4 <- reg int t2 plus reg int t3\nglobal int i; _g_i: def byte 4 <- reg int32_t t4\nbranch  to auto label label1}"];
139633924253744 -> 139633924254080 [style=dashed,label="{global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}"];


inst=reg int t8 <- global int x; _g_x: def byte 4                                     live_in={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                                                                                                                                         live_out={reg int t8, global int i; _g_i: def byte 4}                                    
inst=reg int t9 <- 1                                                                  live_in={reg int t8, global int i; _g_i: def byte 4}                                                                                                                                                             live_out={reg int t8, global int i; _g_i: def byte 4, reg int t9}                        
inst=reg int32_t t10 <- reg int t8 plus reg int t9                                    live_in={reg int t8, global int i; _g_i: def byte 4, reg int t9}                                                                                                                                                 live_out={global int i; _g_i: def byte 4, reg int32_t t10}                               
inst=global int x; _g_x: def byte 4 <- reg int32_t t10                                live_in={global int i; _g_i: def byte 4, reg int32_t t10}                                                                                                                                                        live_out={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                
inst=reg int t2 <- global int i; _g_i: def byte 4                                     live_in={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                                                                                                                                         live_out={reg int t2, global int x; _g_x: def byte 4}                                    
inst=reg int t3 <- 1                                                                  live_in={reg int t2, global int x; _g_x: def byte 4}                                                                                                                                                             live_out={reg int t2, reg int t3, global int x; _g_x: def byte 4}                        
inst=reg int32_t t4 <- reg int t2 plus reg int t3                                     live_in={reg int t2, reg int t3, global int x; _g_x: def byte 4}                                                                                                                                                 live_out={global int x; _g_x: def byte 4, reg int32_t t4}                                
inst=global int i; _g_i: def byte 4 <- reg int32_t t4                                 live_in={global int x; _g_x: def byte 4, reg int32_t t4}                                                                                                                                                         live_out={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                
inst=branch  to auto label label1                                                     live_in={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                                                                                                                                         live_out={global int i; _g_i: def byte 4, global int x; _g_x: def byte 4}                
BASIC BLOCK:
139633924254128 [label="BB139633924254128{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 139633924258160 {
parent = 139633926068864
}}"];
139633924254128 -> exit139633925671280 [label="set()"];


inst=label2: <class 'ir.EmptyStat'> 139633924258160 {
parent = 139633926068864
}      live_in=set()                                                                                                                                                                                                    live_out=set()                                                                           


REGALLOC


LIVENESS INTERVALS:
[{'var': reg int t0, 'interv': range(0, 1)}, {'var': reg int t1, 'interv': range(2, 3)}, {'var': reg int t5, 'interv': range(5, 7)}, {'var': reg int t6, 'interv': range(6, 7)}, {'var': reg int32_t t7, 'interv': range(7, 8)}, {'var': reg int t8, 'interv': range(9, 11)}, {'var': reg int t9, 'interv': range(10, 11)}, {'var': reg int32_t t10, 'interv': range(11, 12)}, {'var': reg int t2, 'interv': range(13, 15)}, {'var': reg int t3, 'interv': range(14, 15)}, {'var': reg int32_t t4, 'interv': range(15, 16)}]
vartoreg = {reg int t0: 0, reg int t1: 1, reg int t5: 2, reg int t6: 3, reg int32_t t7: 4, reg int t8: 5, reg int t9: 6, reg int32_t t10: 7, reg int t2: 8, reg int t3: 0, reg int32_t t4: 1}


CODEGEN


	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_i, 4
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 139633926068864 type <class 'ir.StatList'>
	mov r0, #1
	ldr r12, .const0
	str r0, [r12]
	mov r1, #0
	ldr r12, .const1
	str r1, [r12]
label1:
	@ emptystat
	ldr r12, .const2
	ldr r2, [r12]
	mov r3, #10
	cmp r2, r3
	movlt r4, #1
	movge r4, #0
	tst r4, r4
	beq label2
	ldr r12, .const3
	ldr r5, [r12]
	mov r6, #1
	add r7, r5, r6
	ldr r12, .const4
	str r7, [r12]
	ldr r12, .const5
	ldr r8, [r12]
	mov r0, #1
	add r1, r8, r0
	ldr r12, .const6
	str r1, [r12]
	b label1
label2:
	@ emptystat
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const0:
	.word _g_x
.const1:
	.word _g_i
.const2:
	.word _g_i
.const3:
	.word _g_x
.const4:
	.word _g_x
.const5:
	.word _g_i
.const6:
	.word _g_i

