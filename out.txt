['./main.py', 'out.s']
start <function Parser.program at 0x7fe109d44310>
getsym: varsym var
start <function Parser.block at 0x7fe109d3ff40>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7fe109d441f0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7fe109d441f0>
accepting comma == comma
getsym: ident i
start <function Parser.vardef at 0x7fe109d441f0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7fe109d441f0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7fe109d3fe20>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 140604510806720
start <function Parser.statement at 0x7fe109d3fe20>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x7fe109d3fbe0>
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
end <function Parser.expression at 0x7fe109d3fbe0>
end <function Parser.statement at 0x7fe109d3fe20>
StatList: appending 140604509524832 of type <class 'ir.AssignStat'> to 140604510806720
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7fe109d3fe20>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident i
accepting ident == ident
getsym: comma ,
Looking up i
expecting comma
accepting comma == comma
getsym: number 0
start <function Parser.expression at 0x7fe109d3fbe0>
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == number
accepting number == number
getsym: uptosym upto
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
end <function Parser.expression at 0x7fe109d3fbe0>
accepting downtosym == uptosym
expecting uptosym
accepting uptosym == uptosym
getsym: number 3
start <function Parser.expression at 0x7fe109d3fbe0>
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == number
accepting number == number
getsym: comma ,
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
end <function Parser.expression at 0x7fe109d3fbe0>
expecting comma
accepting comma == comma
getsym: ident i
start <function Parser.expression at 0x7fe109d3fbe0>
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == ident
getsym: plus +
Looking up i
Looking up i
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
getsym: number 1
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
end <function Parser.expression at 0x7fe109d3fbe0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7fe109d3fe20>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 140604509525264
start <function Parser.statement at 0x7fe109d3fe20>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fe109d3fbe0>
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
getsym: number 1
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
end <function Parser.expression at 0x7fe109d3fbe0>
end <function Parser.statement at 0x7fe109d3fe20>
StatList: appending 140604509525648 of type <class 'ir.AssignStat'> to 140604509525264
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7fe109d3fe20>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident i
start <function Parser.expression at 0x7fe109d3fbe0>
start <function Parser.term at 0x7fe109d3fac0>
start <function Parser.factor at 0x7fe109d3f9a0>
accepting ident == ident
getsym: endsym end
Looking up i
Looking up i
end <function Parser.factor at 0x7fe109d3f9a0>
end <function Parser.term at 0x7fe109d3fac0>
end <function Parser.expression at 0x7fe109d3fbe0>
end <function Parser.statement at 0x7fe109d3fe20>
StatList: appending 140604509525792 of type <class 'ir.PrintStat'> to 140604509525264
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 140604509525264 : [ 140604509525648 140604509525792 ]
end <function Parser.statement at 0x7fe109d3fe20>
StatList : new 140604509525936
StatList : new 140604509526272
end <function Parser.statement at 0x7fe109d3fe20>
StatList: appending 140604509525888 of type <class 'ir.ForStat'> to 140604510806720
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: period .
StatList 140604510806720 : [ 140604509524832 140604509525888 ]
end <function Parser.statement at 0x7fe109d3fe20>
end <function Parser.block at 0x7fe109d3ff40>
expecting period
accepting period == period
end <function Parser.program at 0x7fe109d44310>

 <class 'ir.Block'> 140604509526368 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140604510806576 {
	parent = 140604509526368
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140604510806720 {
	parent = 140604509526368
		children:
		<class 'ir.AssignStat'> 140604509524832 {
		parent = 140604510806720
			expr: 	<class 'ir.Const'> 140604510805328 {
			parent = 140604509524832
				symbol: 	None
				value: 	0
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.ForStat'> 140604509525888 {
		parent = 140604510806720
			cond: 	<class 'ir.BinExpr'> 140604509526128 {
			parent = 140604509525888
				children:
				'lss'
				<class 'ir.Var'> 140604509526032 {
				parent = 140604509526128
					symbol: 	global int i
				}
				<class 'ir.Const'> 140604509524880 {
				parent = 140604509526128
					symbol: 	None
					value: 	3
				}
			}
			body: 	<class 'ir.StatList'> 140604509525264 {
			parent = 140604509525888
				children:
				<class 'ir.AssignStat'> 140604509525648 {
				parent = 140604509525264
					expr: 	<class 'ir.BinExpr'> 140604509525552 {
					parent = 140604509525648
						children:
						'plus'
						<class 'ir.Var'> 140604509525360 {
						parent = 140604509525552
							symbol: 	global int x
						}
						<class 'ir.Const'> 140604509525456 {
						parent = 140604509525552
							symbol: 	None
							value: 	1
						}
					}
					offset: 	None
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 140604509525792 {
				parent = 140604509525264
					children:
					<class 'ir.Var'> 140604509525696 {
					parent = 140604509525792
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 140604509525696 {
					parent = 140604509525792
						symbol: 	global int i
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 140604510805232 {
			parent = 140604509525888
				expr: 	<class 'ir.BinExpr'> 140604509525168 {
				parent = 140604510805232
					children:
					'plus'
					<class 'ir.Var'> 140604509524976 {
					parent = 140604509525168
						symbol: 	global int i
					}
					<class 'ir.Const'> 140604509525072 {
					parent = 140604509525168
						symbol: 	None
						value: 	1
					}
				}
				offset: 	None
				symbol: 	global int i
			}
			start_assign: 	<class 'ir.AssignStat'> 140604509525984 {
			parent = 140604509525888
				expr: 	<class 'ir.Const'> 140604510806672 {
				parent = 140604509525984
					symbol: 	None
					value: 	0
				}
				offset: 	None
				symbol: 	global int i
			}
			remainder_for: 	<class 'ir.StatList'> 140604509526272 {
			parent = 140604509525888
			}
			unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509525936 {
			parent = 140604509525888
			}
		}
	}
} 

<class 'ir.DefinitionList'> 140604510806576
successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 2
<class 'ir.Const'> 140604510805328
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509524832
<class 'ir.AssignStat'> 140604509524832
navigating children of <class 'ir.BinExpr'> 140604509526128 3
<class 'ir.Var'> 140604509526032
<class 'ir.Const'> 140604509524880
<class 'ir.BinExpr'> 140604509526128
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509525888
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.BinExpr'> 140604509525552 3
<class 'ir.Var'> 140604509525360
<class 'ir.Const'> 140604509525456
<class 'ir.BinExpr'> 140604509525552
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525648
<class 'ir.AssignStat'> 140604509525648
navigating children of <class 'ir.PrintStat'> 140604509525792 1
<class 'ir.Var'> 140604509525696
<class 'ir.Var'> 140604509525696
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140604509525792
<class 'ir.PrintStat'> 140604509525792
<class 'ir.StatList'> 140604509525264
StatList 140604509525264 : [ 140604509525648 140604509525792 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509525888
navigating children of <class 'ir.BinExpr'> 140604509525168 3
<class 'ir.Var'> 140604509524976
<class 'ir.Const'> 140604509525072
<class 'ir.BinExpr'> 140604509525168
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604510805232
<class 'ir.AssignStat'> 140604510805232
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509525888
<class 'ir.Const'> 140604510806672
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525984
<class 'ir.AssignStat'> 140604509525984
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509525888
<class 'ir.StatList'> 140604509526272
StatList 140604509526272 : [ ]
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509525888
<class 'ir.StatList'> 140604509525936
StatList 140604509525936 : [ ]
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509525888
<class 'ir.ForStat'> 140604509525888
<class 'ir.StatList'> 140604510806720
StatList 140604510806720 : [ 140604509524832 140604509525888 ]
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368
<class 'ir.Block'> 140604509526368
successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509524832
navigating children of <class 'ir.BinExpr'> 140604509526128 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509525888
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.BinExpr'> 140604509525552 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525648
navigating children of <class 'ir.PrintStat'> 140604509525792 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140604509525792
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509525888
navigating children of <class 'ir.BinExpr'> 140604509525168 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604510805232
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509525888
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525984
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509525888
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509525888
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509525888
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368
<class 'ir.DefinitionList'> 140604510806576
<class 'ir.Const'> 140604510805328
<class 'ir.AssignStat'> 140604509524832
<class 'ir.Var'> 140604509526032
<class 'ir.Const'> 140604509524880
<class 'ir.BinExpr'> 140604509526128
<class 'ir.Var'> 140604509525360
<class 'ir.Const'> 140604509525456
<class 'ir.BinExpr'> 140604509525552
<class 'ir.AssignStat'> 140604509525648
<class 'ir.Var'> 140604509525696
<class 'ir.PrintStat'> 140604509525792
<class 'ir.StatList'> 140604509525264
<class 'ir.Var'> 140604509524976
<class 'ir.Const'> 140604509525072
<class 'ir.BinExpr'> 140604509525168
<class 'ir.AssignStat'> 140604510805232
<class 'ir.Const'> 140604510806672
<class 'ir.AssignStat'> 140604509525984
<class 'ir.StatList'> 140604509526272
<class 'ir.StatList'> 140604509525936
<class 'ir.ForStat'> 140604509525888

STARTING STRIP MINING

END CONSTANT
STEP CONSTANT
START CONSTANT
OUTER EXPRS CREATED
INNER EXPRS CREATED
StatList : new 140604509528192
StatList : new 140604509528288
INNER FOR CREATED
StatList : new 140604509528720
StatList : new 140604509528816
3
StatList : new 140604509530112
StatList : new 140604509530208
REMAINDER FOR APPENDED

<class 'ir.StatList'> 140604509526272 {
parent = 140604509525888
}
OUTER FOR CREATED
OUTER FOR INCOMINGs
<class 'ir.ForStat'> 140604509528384 {
parent = 140604510806720
	cond: 	<class 'ir.BinExpr'> 140604509528624 {
	parent = 140604509528384
		children:
		'lss'
		<class 'ir.Var'> 140604509528528 {
		parent = 140604509528624
			symbol: 	auto int tmp_variable_for_strip_mining
		}
		<class 'ir.Const'> 140604509527232 {
		parent = 140604509528624
			symbol: 	None
			value: 	0
		}
	}
	body: 	<class 'ir.ForStat'> 140604509527856 {
	parent = 140604509528384
		cond: 	<class 'ir.BinExpr'> 140604509528096 {
		parent = 140604509527856
			children:
			'lss'
			<class 'ir.Var'> 140604509528000 {
			parent = 140604509528096
				symbol: 	global int i
			}
			<class 'ir.BinExpr'> 140604509527760 {
			parent = 140604509528096
				children:
				'plus'
				<class 'ir.BinExpr'> 140604509527664 {
				parent = 140604509527760
					children:
					'times'
					<class 'ir.Var'> 140604509526704 {
					parent = 140604509527664
						symbol: 	auto int tmp_variable_for_strip_mining
					}
					<class 'ir.Const'> 140604509526848 {
					parent = 140604509527664
						symbol: 	None
						value: 	5
					}
				}
				<class 'ir.Const'> 140604509526944 {
				parent = 140604509527760
					symbol: 	None
					value: 	5
				}
			}
		}
		body: 	<class 'ir.StatList'> 140604509525264 {
		parent = 140604509529776
			children:
			<class 'ir.AssignStat'> 140604509525648 {
			parent = 140604509525264
				expr: 	<class 'ir.BinExpr'> 140604509525552 {
				parent = 140604509525648
					children:
					'plus'
					<class 'ir.Var'> 140604509525360 {
					parent = 140604509525552
						symbol: 	global int x
					}
					<class 'ir.Const'> 140604509525456 {
					parent = 140604509525552
						symbol: 	None
						value: 	1
					}
				}
				offset: 	None
				symbol: 	global int x
			}
			<class 'ir.PrintStat'> 140604509525792 {
			parent = 140604509525264
				children:
				<class 'ir.Var'> 140604509525696 {
				parent = 140604509525792
					symbol: 	global int i
				}
				expr: 	<class 'ir.Var'> 140604509525696 {
				parent = 140604509525792
					symbol: 	global int i
				}
			}
		}
		step: 	<class 'ir.AssignStat'> 140604509527952 {
		parent = 140604509527856
			expr: 	<class 'ir.BinExpr'> 140604509525168 {
			parent = 140604509527952
				children:
				'plus'
				<class 'ir.Var'> 140604509524976 {
				parent = 140604509525168
					symbol: 	global int i
				}
				<class 'ir.Const'> 140604509525072 {
				parent = 140604509525168
					symbol: 	None
					value: 	1
				}
			}
			offset: 	None
			symbol: 	global int i
		}
		start_assign: 	<class 'ir.AssignStat'> 140604509527904 {
		parent = 140604509527856
			expr: 	<class 'ir.BinExpr'> 140604509527520 {
			parent = 140604509527904
				children:
				'times'
				<class 'ir.Var'> 140604509526608 {
				parent = 140604509527520
					symbol: 	auto int tmp_variable_for_strip_mining
				}
				<class 'ir.Const'> 140604509526800 {
				parent = 140604509527520
					symbol: 	None
					value: 	5
				}
			}
			offset: 	None
			symbol: 	global int i
		}
		remainder_for: 	<class 'ir.StatList'> 140604509528288 {
		parent = 140604509527856
		}
		unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509528192 {
		parent = 140604509527856
		}
	}
	step: 	<class 'ir.AssignStat'> 140604509528480 {
	parent = 140604509528384
		expr: 	<class 'ir.BinExpr'> 140604509527328 {
		parent = 140604509528480
			children:
			'plus'
			<class 'ir.Var'> 140604509526656 {
			parent = 140604509527328
				symbol: 	auto int tmp_variable_for_strip_mining
			}
			<class 'ir.Const'> 140604509527184 {
			parent = 140604509527328
				symbol: 	None
				value: 	1
			}
		}
		offset: 	None
		symbol: 	auto int tmp_variable_for_strip_mining
	}
	start_assign: 	<class 'ir.AssignStat'> 140604509528432 {
	parent = 140604509528384
		expr: 	<class 'ir.Const'> 140604509527472 {
		parent = 140604509528432
			symbol: 	None
			value: 	0
		}
		offset: 	None
		symbol: 	auto int tmp_variable_for_strip_mining
	}
	remainder_for: 	<class 'ir.ForStat'> 140604509529776 {
	parent = 140604509528384
		cond: 	<class 'ir.BinExpr'> 140604509530016 {
		parent = 140604509529776
			children:
			'lss'
			<class 'ir.Var'> 140604509529920 {
			parent = 140604509530016
				symbol: 	global int i
			}
			<class 'ir.Const'> 140604509529344 {
			parent = 140604509530016
				symbol: 	None
				value: 	3
			}
		}
		body: 	<class 'ir.StatList'> 140604509525264 {
		parent = 140604509529776
			children:
			<class 'ir.AssignStat'> 140604509525648 {
			parent = 140604509525264
				expr: 	<class 'ir.BinExpr'> 140604509525552 {
				parent = 140604509525648
					children:
					'plus'
					<class 'ir.Var'> 140604509525360 {
					parent = 140604509525552
						symbol: 	global int x
					}
					<class 'ir.Const'> 140604509525456 {
					parent = 140604509525552
						symbol: 	None
						value: 	1
					}
				}
				offset: 	None
				symbol: 	global int x
			}
			<class 'ir.PrintStat'> 140604509525792 {
			parent = 140604509525264
				children:
				<class 'ir.Var'> 140604509525696 {
				parent = 140604509525792
					symbol: 	global int i
				}
				expr: 	<class 'ir.Var'> 140604509525696 {
				parent = 140604509525792
					symbol: 	global int i
				}
			}
		}
		step: 	<class 'ir.AssignStat'> 140604509529872 {
		parent = 140604509529776
			expr: 	<class 'ir.BinExpr'> 140604509529440 {
			parent = 140604509529872
				children:
				'plus'
				<class 'ir.Var'> 140604509529008 {
				parent = 140604509529440
					symbol: 	global int i
				}
				<class 'ir.Const'> 140604509529248 {
				parent = 140604509529440
					symbol: 	None
					value: 	1
				}
			}
			offset: 	None
			symbol: 	global int i
		}
		start_assign: 	<class 'ir.AssignStat'> 140604509529824 {
		parent = 140604509529776
			expr: 	<class 'ir.Var'> 140604509528912 {
			parent = 140604509529824
				symbol: 	global int i
			}
			offset: 	None
			symbol: 	global int i
		}
		remainder_for: 	<class 'ir.StatList'> 140604509530208 {
		parent = 140604509529776
		}
		unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509530112 {
		parent = 140604509529776
		}
	}
	unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509528720 {
	parent = 140604509528384
	}
}
REPLACED
<class 'ir.StatList'> 140604510806720 {
parent = 140604509526368
	children:
	<class 'ir.AssignStat'> 140604509524832 {
	parent = 140604510806720
		expr: 	<class 'ir.Const'> 140604510805328 {
		parent = 140604509524832
			symbol: 	None
			value: 	0
		}
		offset: 	None
		symbol: 	global int x
	}
	<class 'ir.ForStat'> 140604509528384 {
	parent = 140604510806720
		cond: 	<class 'ir.BinExpr'> 140604509528624 {
		parent = 140604509528384
			children:
			'lss'
			<class 'ir.Var'> 140604509528528 {
			parent = 140604509528624
				symbol: 	auto int tmp_variable_for_strip_mining
			}
			<class 'ir.Const'> 140604509527232 {
			parent = 140604509528624
				symbol: 	None
				value: 	0
			}
		}
		body: 	<class 'ir.ForStat'> 140604509527856 {
		parent = 140604509528384
			cond: 	<class 'ir.BinExpr'> 140604509528096 {
			parent = 140604509527856
				children:
				'lss'
				<class 'ir.Var'> 140604509528000 {
				parent = 140604509528096
					symbol: 	global int i
				}
				<class 'ir.BinExpr'> 140604509527760 {
				parent = 140604509528096
					children:
					'plus'
					<class 'ir.BinExpr'> 140604509527664 {
					parent = 140604509527760
						children:
						'times'
						<class 'ir.Var'> 140604509526704 {
						parent = 140604509527664
							symbol: 	auto int tmp_variable_for_strip_mining
						}
						<class 'ir.Const'> 140604509526848 {
						parent = 140604509527664
							symbol: 	None
							value: 	5
						}
					}
					<class 'ir.Const'> 140604509526944 {
					parent = 140604509527760
						symbol: 	None
						value: 	5
					}
				}
			}
			body: 	<class 'ir.StatList'> 140604509525264 {
			parent = 140604509529776
				children:
				<class 'ir.AssignStat'> 140604509525648 {
				parent = 140604509525264
					expr: 	<class 'ir.BinExpr'> 140604509525552 {
					parent = 140604509525648
						children:
						'plus'
						<class 'ir.Var'> 140604509525360 {
						parent = 140604509525552
							symbol: 	global int x
						}
						<class 'ir.Const'> 140604509525456 {
						parent = 140604509525552
							symbol: 	None
							value: 	1
						}
					}
					offset: 	None
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 140604509525792 {
				parent = 140604509525264
					children:
					<class 'ir.Var'> 140604509525696 {
					parent = 140604509525792
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 140604509525696 {
					parent = 140604509525792
						symbol: 	global int i
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 140604509527952 {
			parent = 140604509527856
				expr: 	<class 'ir.BinExpr'> 140604509525168 {
				parent = 140604509527952
					children:
					'plus'
					<class 'ir.Var'> 140604509524976 {
					parent = 140604509525168
						symbol: 	global int i
					}
					<class 'ir.Const'> 140604509525072 {
					parent = 140604509525168
						symbol: 	None
						value: 	1
					}
				}
				offset: 	None
				symbol: 	global int i
			}
			start_assign: 	<class 'ir.AssignStat'> 140604509527904 {
			parent = 140604509527856
				expr: 	<class 'ir.BinExpr'> 140604509527520 {
				parent = 140604509527904
					children:
					'times'
					<class 'ir.Var'> 140604509526608 {
					parent = 140604509527520
						symbol: 	auto int tmp_variable_for_strip_mining
					}
					<class 'ir.Const'> 140604509526800 {
					parent = 140604509527520
						symbol: 	None
						value: 	5
					}
				}
				offset: 	None
				symbol: 	global int i
			}
			remainder_for: 	<class 'ir.StatList'> 140604509528288 {
			parent = 140604509527856
			}
			unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509528192 {
			parent = 140604509527856
			}
		}
		step: 	<class 'ir.AssignStat'> 140604509528480 {
		parent = 140604509528384
			expr: 	<class 'ir.BinExpr'> 140604509527328 {
			parent = 140604509528480
				children:
				'plus'
				<class 'ir.Var'> 140604509526656 {
				parent = 140604509527328
					symbol: 	auto int tmp_variable_for_strip_mining
				}
				<class 'ir.Const'> 140604509527184 {
				parent = 140604509527328
					symbol: 	None
					value: 	1
				}
			}
			offset: 	None
			symbol: 	auto int tmp_variable_for_strip_mining
		}
		start_assign: 	<class 'ir.AssignStat'> 140604509528432 {
		parent = 140604509528384
			expr: 	<class 'ir.Const'> 140604509527472 {
			parent = 140604509528432
				symbol: 	None
				value: 	0
			}
			offset: 	None
			symbol: 	auto int tmp_variable_for_strip_mining
		}
		remainder_for: 	<class 'ir.ForStat'> 140604509529776 {
		parent = 140604509528384
			cond: 	<class 'ir.BinExpr'> 140604509530016 {
			parent = 140604509529776
				children:
				'lss'
				<class 'ir.Var'> 140604509529920 {
				parent = 140604509530016
					symbol: 	global int i
				}
				<class 'ir.Const'> 140604509529344 {
				parent = 140604509530016
					symbol: 	None
					value: 	3
				}
			}
			body: 	<class 'ir.StatList'> 140604509525264 {
			parent = 140604509529776
				children:
				<class 'ir.AssignStat'> 140604509525648 {
				parent = 140604509525264
					expr: 	<class 'ir.BinExpr'> 140604509525552 {
					parent = 140604509525648
						children:
						'plus'
						<class 'ir.Var'> 140604509525360 {
						parent = 140604509525552
							symbol: 	global int x
						}
						<class 'ir.Const'> 140604509525456 {
						parent = 140604509525552
							symbol: 	None
							value: 	1
						}
					}
					offset: 	None
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 140604509525792 {
				parent = 140604509525264
					children:
					<class 'ir.Var'> 140604509525696 {
					parent = 140604509525792
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 140604509525696 {
					parent = 140604509525792
						symbol: 	global int i
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 140604509529872 {
			parent = 140604509529776
				expr: 	<class 'ir.BinExpr'> 140604509529440 {
				parent = 140604509529872
					children:
					'plus'
					<class 'ir.Var'> 140604509529008 {
					parent = 140604509529440
						symbol: 	global int i
					}
					<class 'ir.Const'> 140604509529248 {
					parent = 140604509529440
						symbol: 	None
						value: 	1
					}
				}
				offset: 	None
				symbol: 	global int i
			}
			start_assign: 	<class 'ir.AssignStat'> 140604509529824 {
			parent = 140604509529776
				expr: 	<class 'ir.Var'> 140604509528912 {
				parent = 140604509529824
					symbol: 	global int i
				}
				offset: 	None
				symbol: 	global int i
			}
			remainder_for: 	<class 'ir.StatList'> 140604509530208 {
			parent = 140604509529776
			}
			unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509530112 {
			parent = 140604509529776
			}
		}
		unroll_remainder_statlist: 	<class 'ir.StatList'> 140604509528720 {
		parent = 140604509528384
		}
	}
}
<class 'ir.StatList'> 140604510806720
<class 'ir.Block'> 140604509526368
successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509524832
navigating children of <class 'ir.BinExpr'> 140604509528624 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509528384
navigating children of <class 'ir.BinExpr'> 140604509528096 3
navigating children of <class 'ir.BinExpr'> 140604509527760 3
navigating children of <class 'ir.BinExpr'> 140604509527664 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509527856
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.BinExpr'> 140604509525552 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525648
navigating children of <class 'ir.PrintStat'> 140604509525792 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140604509525792
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509527856
navigating children of <class 'ir.BinExpr'> 140604509525168 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509527952
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509527856
navigating children of <class 'ir.BinExpr'> 140604509527520 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509527904
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509527856
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509527856
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509527856
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509528384
navigating children of <class 'ir.BinExpr'> 140604509527328 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509528480
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509528384
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509528432
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509528384
navigating children of <class 'ir.BinExpr'> 140604509530016 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509529776
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.BinExpr'> 140604509525552 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525648
navigating children of <class 'ir.PrintStat'> 140604509525792 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140604509525792
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509529776
navigating children of <class 'ir.BinExpr'> 140604509529440 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509529872
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509529776
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509529824
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509529776
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509529776
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509529776
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509528384
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509528384
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368
<class 'ir.DefinitionList'> 140604510806576 -> <class 'ir.Block'> 140604509526368
<class 'ir.Const'> 140604510805328 -> <class 'ir.AssignStat'> 140604509524832
<class 'ir.AssignStat'> 140604509524832 -> <class 'ir.StatList'> 140604510806720
<class 'ir.Var'> 140604509528528 -> <class 'ir.BinExpr'> 140604509528624
<class 'ir.Const'> 140604509527232 -> <class 'ir.BinExpr'> 140604509528624
<class 'ir.BinExpr'> 140604509528624 -> <class 'ir.ForStat'> 140604509528384
<class 'ir.Var'> 140604509528000 -> <class 'ir.BinExpr'> 140604509528096
<class 'ir.Var'> 140604509526704 -> <class 'ir.BinExpr'> 140604509527664
<class 'ir.Const'> 140604509526848 -> <class 'ir.BinExpr'> 140604509527664
<class 'ir.BinExpr'> 140604509527664 -> <class 'ir.BinExpr'> 140604509527760
<class 'ir.Const'> 140604509526944 -> <class 'ir.BinExpr'> 140604509527760
<class 'ir.BinExpr'> 140604509527760 -> <class 'ir.BinExpr'> 140604509528096
<class 'ir.BinExpr'> 140604509528096 -> <class 'ir.ForStat'> 140604509527856
<class 'ir.Var'> 140604509525360 -> <class 'ir.BinExpr'> 140604509525552
<class 'ir.Const'> 140604509525456 -> <class 'ir.BinExpr'> 140604509525552
<class 'ir.BinExpr'> 140604509525552 -> <class 'ir.AssignStat'> 140604509525648
<class 'ir.AssignStat'> 140604509525648 -> <class 'ir.StatList'> 140604509525264
<class 'ir.Var'> 140604509525696 -> <class 'ir.PrintStat'> 140604509525792
<class 'ir.PrintStat'> 140604509525792 -> <class 'ir.StatList'> 140604509525264
<class 'ir.StatList'> 140604509525264 -> <class 'ir.ForStat'> 140604509529776
<class 'ir.Var'> 140604509524976 -> <class 'ir.BinExpr'> 140604509525168
<class 'ir.Const'> 140604509525072 -> <class 'ir.BinExpr'> 140604509525168
<class 'ir.BinExpr'> 140604509525168 -> <class 'ir.AssignStat'> 140604509527952
<class 'ir.AssignStat'> 140604509527952 -> <class 'ir.ForStat'> 140604509527856
<class 'ir.Var'> 140604509526608 -> <class 'ir.BinExpr'> 140604509527520
<class 'ir.Const'> 140604509526800 -> <class 'ir.BinExpr'> 140604509527520
<class 'ir.BinExpr'> 140604509527520 -> <class 'ir.AssignStat'> 140604509527904
<class 'ir.AssignStat'> 140604509527904 -> <class 'ir.ForStat'> 140604509527856
<class 'ir.StatList'> 140604509528288 -> <class 'ir.ForStat'> 140604509527856
<class 'ir.StatList'> 140604509528192 -> <class 'ir.ForStat'> 140604509527856
<class 'ir.ForStat'> 140604509527856 -> <class 'ir.ForStat'> 140604509528384
<class 'ir.Var'> 140604509526656 -> <class 'ir.BinExpr'> 140604509527328
<class 'ir.Const'> 140604509527184 -> <class 'ir.BinExpr'> 140604509527328
<class 'ir.BinExpr'> 140604509527328 -> <class 'ir.AssignStat'> 140604509528480
<class 'ir.AssignStat'> 140604509528480 -> <class 'ir.ForStat'> 140604509528384
<class 'ir.Const'> 140604509527472 -> <class 'ir.AssignStat'> 140604509528432
<class 'ir.AssignStat'> 140604509528432 -> <class 'ir.ForStat'> 140604509528384
<class 'ir.Var'> 140604509529920 -> <class 'ir.BinExpr'> 140604509530016
<class 'ir.Const'> 140604509529344 -> <class 'ir.BinExpr'> 140604509530016
<class 'ir.BinExpr'> 140604509530016 -> <class 'ir.ForStat'> 140604509529776
<class 'ir.Var'> 140604509529008 -> <class 'ir.BinExpr'> 140604509529440
<class 'ir.Const'> 140604509529248 -> <class 'ir.BinExpr'> 140604509529440
<class 'ir.BinExpr'> 140604509529440 -> <class 'ir.AssignStat'> 140604509529872
<class 'ir.AssignStat'> 140604509529872 -> <class 'ir.ForStat'> 140604509529776
<class 'ir.Var'> 140604509528912 -> <class 'ir.AssignStat'> 140604509529824
<class 'ir.AssignStat'> 140604509529824 -> <class 'ir.ForStat'> 140604509529776
<class 'ir.StatList'> 140604509530208 -> <class 'ir.ForStat'> 140604509529776
<class 'ir.StatList'> 140604509530112 -> <class 'ir.ForStat'> 140604509529776
<class 'ir.ForStat'> 140604509529776 -> <class 'ir.ForStat'> 140604509528384
<class 'ir.StatList'> 140604509528720 -> <class 'ir.ForStat'> 140604509528384
<class 'ir.ForStat'> 140604509528384 -> <class 'ir.StatList'> 140604510806720
<class 'ir.StatList'> 140604510806720 -> <class 'ir.Block'> 140604509526368
<class 'ir.Block'> 140604509526368 -> <class 'NoneType'> 94724703871968

Total nodes in IR: 53 

Cannot lower 140604510806576 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 2
StatList : new 140604509529104
Lowering <class 'ir.Const'> 140604510805328
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509524832
StatList : new 140604509530352
Lowering <class 'ir.AssignStat'> 140604509524832
navigating children of <class 'ir.BinExpr'> 140604509528624 3
StatList : new 140604509530304
Lowering <class 'ir.Var'> 140604509528528
StatList : new 140604509530592
Lowering <class 'ir.Const'> 140604509527232
StatList : new 140604509530688
Lowering <class 'ir.BinExpr'> 140604509528624
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509528384
navigating children of <class 'ir.BinExpr'> 140604509528096 3
StatList : new 140604509530976
Lowering <class 'ir.Var'> 140604509528000
navigating children of <class 'ir.BinExpr'> 140604509527760 3
navigating children of <class 'ir.BinExpr'> 140604509527664 3
StatList : new 140604509531264
Lowering <class 'ir.Var'> 140604509526704
StatList : new 140604509531552
Lowering <class 'ir.Const'> 140604509526848
StatList : new 140604509531648
Lowering <class 'ir.BinExpr'> 140604509527664
StatList : new 140604509531984
Lowering <class 'ir.Const'> 140604509526944
StatList : new 140604509532080
Lowering <class 'ir.BinExpr'> 140604509527760
StatList : new 140604509532320
Lowering <class 'ir.BinExpr'> 140604509528096
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509527856
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.BinExpr'> 140604509525552 3
StatList : new 140604509532608
Lowering <class 'ir.Var'> 140604509525360
StatList : new 140604509532944
Lowering <class 'ir.Const'> 140604509525456
StatList : new 140604509533040
Lowering <class 'ir.BinExpr'> 140604509525552
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509525648
StatList : new 140604509533280
Lowering <class 'ir.AssignStat'> 140604509525648
navigating children of <class 'ir.PrintStat'> 140604509525792 1
StatList : new 140604509533520
Lowering <class 'ir.Var'> 140604509525696
StatList : new 140604509533808
Lowering <class 'ir.Var'> 140604509525696
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140604509525792
StatList : new 140604509533904
Lowering <class 'ir.PrintStat'> 140604509525792
Cannot lower 140604509525264 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509527856
navigating children of <class 'ir.BinExpr'> 140604509525168 3
StatList : new 140604509534048
Lowering <class 'ir.Var'> 140604509524976
StatList : new 140604509534288
Lowering <class 'ir.Const'> 140604509525072
StatList : new 140604509534384
Lowering <class 'ir.BinExpr'> 140604509525168
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509527952
StatList : new 140604509534624
Lowering <class 'ir.AssignStat'> 140604509527952
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509527856
navigating children of <class 'ir.BinExpr'> 140604509527520 3
StatList : new 140604509534816
Lowering <class 'ir.Var'> 140604509526608
StatList : new 140604509535104
Lowering <class 'ir.Const'> 140604509526800
StatList : new 140604509535200
Lowering <class 'ir.BinExpr'> 140604509527520
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509527904
StatList : new 140604509535440
Lowering <class 'ir.AssignStat'> 140604509527904
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509527856
Cannot lower 140604509528288 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509527856
Cannot lower 140604509528192 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509527856
StatList : new 140604509535872
Lowering <class 'ir.ForStat'> 140604509527856
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509528384
navigating children of <class 'ir.BinExpr'> 140604509527328 3
StatList : new 140604509536016
Lowering <class 'ir.Var'> 140604509526656
StatList : new 140604509683872
Lowering <class 'ir.Const'> 140604509527184
StatList : new 140604509683920
Lowering <class 'ir.BinExpr'> 140604509527328
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509528480
StatList : new 140604509684160
Lowering <class 'ir.AssignStat'> 140604509528480
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509528384
StatList : new 140604509684400
Lowering <class 'ir.Const'> 140604509527472
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509528432
StatList : new 140604509684496
Lowering <class 'ir.AssignStat'> 140604509528432
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509528384
navigating children of <class 'ir.BinExpr'> 140604509530016 3
StatList : new 140604509684688
Lowering <class 'ir.Var'> 140604509529920
StatList : new 140604509684976
Lowering <class 'ir.Const'> 140604509529344
StatList : new 140604509685072
Lowering <class 'ir.BinExpr'> 140604509530016
successfully navigated attr  cond  of <class 'ir.ForStat'> 140604509529776
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.StatList'> 140604509533280 2
navigating children of <class 'ir.StatList'> 140604509533040 3
navigating children of <class 'ir.StatList'> 140604509532608 1
Cannot lower 140604509532560 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140604509532608 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140604509532944 1
Cannot lower 140604509532896 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140604509532944 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140604509533136 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140604509533040 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140604509533328 <class 'ir.StoreStat'> 'StoreStat' object has no attribute 'lower'
Cannot lower 140604509533280 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140604509533904 2
navigating children of <class 'ir.StatList'> 140604509533808 1
Cannot lower 140604509533568 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140604509533808 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140604509533664 <class 'ir.PrintCommand'> 'PrintCommand' object has no attribute 'lower'
Cannot lower 140604509533904 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140604509525264 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 140604509529776
navigating children of <class 'ir.BinExpr'> 140604509529440 3
StatList : new 140604509529296
Lowering <class 'ir.Var'> 140604509529008
StatList : new 140604509526080
Lowering <class 'ir.Const'> 140604509529248
StatList : new 140604509526176
Lowering <class 'ir.BinExpr'> 140604509529440
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509529872
StatList : new 140604509525936
Lowering <class 'ir.AssignStat'> 140604509529872
successfully navigated attr  step  of <class 'ir.ForStat'> 140604509529776
StatList : new 140604509685408
Lowering <class 'ir.Var'> 140604509528912
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140604509529824
StatList : new 140604509685312
Lowering <class 'ir.AssignStat'> 140604509529824
successfully navigated attr  start_assign  of <class 'ir.ForStat'> 140604509529776
Cannot lower 140604509530208 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509529776
Cannot lower 140604509530112 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509529776
StatList : new 140604509685840
Lowering <class 'ir.ForStat'> 140604509529776
successfully navigated attr  remainder_for  of <class 'ir.ForStat'> 140604509528384
Cannot lower 140604509528720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  unroll_remainder_statlist  of <class 'ir.ForStat'> 140604509528384
StatList : new 140604509686224
Lowering <class 'ir.ForStat'> 140604509528384
Cannot lower 140604510806720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368
Cannot lower 140604509526368 <class 'ir.Block'> 'Block' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 2
navigating children of <class 'ir.StatList'> 140604509530352 2
navigating children of <class 'ir.StatList'> 140604509529104 1
navigating children of <class 'ir.StatList'> 140604509686224 9
navigating children of <class 'ir.StatList'> 140604509684496 2
navigating children of <class 'ir.StatList'> 140604509684400 1
navigating children of <class 'ir.StatList'> 140604509530688 3
navigating children of <class 'ir.StatList'> 140604509530304 1
navigating children of <class 'ir.StatList'> 140604509530592 1
navigating children of <class 'ir.StatList'> 140604509535872 9
navigating children of <class 'ir.StatList'> 140604509535440 2
navigating children of <class 'ir.StatList'> 140604509535200 3
navigating children of <class 'ir.StatList'> 140604509534816 1
navigating children of <class 'ir.StatList'> 140604509535104 1
navigating children of <class 'ir.StatList'> 140604509532320 3
navigating children of <class 'ir.StatList'> 140604509530976 1
navigating children of <class 'ir.StatList'> 140604509532080 3
navigating children of <class 'ir.StatList'> 140604509531648 3
navigating children of <class 'ir.StatList'> 140604509531264 1
navigating children of <class 'ir.StatList'> 140604509531552 1
navigating children of <class 'ir.StatList'> 140604509531984 1
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.StatList'> 140604509533280 2
navigating children of <class 'ir.StatList'> 140604509533040 3
navigating children of <class 'ir.StatList'> 140604509532608 1
navigating children of <class 'ir.StatList'> 140604509532944 1
navigating children of <class 'ir.StatList'> 140604509533904 2
navigating children of <class 'ir.StatList'> 140604509533808 1
navigating children of <class 'ir.StatList'> 140604509534624 2
navigating children of <class 'ir.StatList'> 140604509534384 3
navigating children of <class 'ir.StatList'> 140604509534048 1
navigating children of <class 'ir.StatList'> 140604509534288 1
navigating children of <class 'ir.StatList'> 140604509684160 2
navigating children of <class 'ir.StatList'> 140604509683920 3
navigating children of <class 'ir.StatList'> 140604509536016 1
navigating children of <class 'ir.StatList'> 140604509683872 1
navigating children of <class 'ir.StatList'> 140604509685840 9
navigating children of <class 'ir.StatList'> 140604509685312 2
navigating children of <class 'ir.StatList'> 140604509685408 1
navigating children of <class 'ir.StatList'> 140604509685072 3
navigating children of <class 'ir.StatList'> 140604509684688 1
navigating children of <class 'ir.StatList'> 140604509684976 1
navigating children of <class 'ir.StatList'> 140604509525264 2
navigating children of <class 'ir.StatList'> 140604509533280 2
navigating children of <class 'ir.StatList'> 140604509533040 3
navigating children of <class 'ir.StatList'> 140604509532608 1
navigating children of <class 'ir.StatList'> 140604509532944 1
navigating children of <class 'ir.StatList'> 140604509533904 2
navigating children of <class 'ir.StatList'> 140604509533808 1
navigating children of <class 'ir.StatList'> 140604509525936 2
navigating children of <class 'ir.StatList'> 140604509526176 3
navigating children of <class 'ir.StatList'> 140604509529296 1
navigating children of <class 'ir.StatList'> 140604509526080 1
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368

 <class 'ir.Block'> 140604509526368 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140604510806576 {
	parent = 140604509526368
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140604510806720 {
	parent = 140604509526368
		children:
		<class 'ir.StatList'> 140604509530352 {
		parent = 140604510806720
			children:
			<class 'ir.StatList'> 140604509529104 {
			parent = 140604509530352
				children:
				reg int t0 <- 0
			}
			global int x <- reg int t0
		}
		<class 'ir.StatList'> 140604509686224 {
		parent = 140604510806720
			children:
			<class 'ir.StatList'> 140604509684496 {
			parent = 140604509686224
				children:
				<class 'ir.StatList'> 140604509684400 {
				parent = 140604509684496
					children:
					reg int t25 <- 0
				}
				auto int tmp_variable_for_strip_mining <- reg int t25
			}
			label5: <class 'ir.StatList'> 140604509530688 {
			parent = 140604509686224
				children:
				<class 'ir.StatList'> 140604509530304 {
				parent = 140604509530688
					children:
					reg int t1 <- auto int tmp_variable_for_strip_mining
				}
				<class 'ir.StatList'> 140604509530592 {
				parent = 140604509530688
					children:
					reg int t2 <- 0
				}
				reg int32_t t3 <- reg int t1 lss reg int t2
			}
			branch on not reg int32_t t3 to auto label label6
			<class 'ir.StatList'> 140604509535872 {
			parent = 140604509686224
				children:
				<class 'ir.StatList'> 140604509535440 {
				parent = 140604509535872
					children:
					<class 'ir.StatList'> 140604509535200 {
					parent = 140604509535440
						children:
						<class 'ir.StatList'> 140604509534816 {
						parent = 140604509535200
							children:
							reg int t19 <- auto int tmp_variable_for_strip_mining
						}
						<class 'ir.StatList'> 140604509535104 {
						parent = 140604509535200
							children:
							reg int t20 <- 5
						}
						reg int32_t t21 <- reg int t19 times reg int t20
					}
					global int i <- reg int32_t t21
				}
				label1: <class 'ir.StatList'> 140604509532320 {
				parent = 140604509535872
					children:
					<class 'ir.StatList'> 140604509530976 {
					parent = 140604509532320
						children:
						reg int t4 <- global int i
					}
					<class 'ir.StatList'> 140604509532080 {
					parent = 140604509532320
						children:
						<class 'ir.StatList'> 140604509531648 {
						parent = 140604509532080
							children:
							<class 'ir.StatList'> 140604509531264 {
							parent = 140604509531648
								children:
								reg int t5 <- auto int tmp_variable_for_strip_mining
							}
							<class 'ir.StatList'> 140604509531552 {
							parent = 140604509531648
								children:
								reg int t6 <- 5
							}
							reg int32_t t7 <- reg int t5 times reg int t6
						}
						<class 'ir.StatList'> 140604509531984 {
						parent = 140604509532080
							children:
							reg int t8 <- 5
						}
						reg int32_t t9 <- reg int32_t t7 plus reg int t8
					}
					reg int32_t t10 <- reg int t4 lss reg int32_t t9
				}
				branch on not reg int32_t t10 to auto label label2
				<class 'ir.StatList'> 140604509525264 {
				parent = 140604509685840
					children:
					<class 'ir.StatList'> 140604509533280 {
					parent = 140604509525264
						children:
						<class 'ir.StatList'> 140604509533040 {
						parent = 140604509533280
							children:
							<class 'ir.StatList'> 140604509532608 {
							parent = 140604509533040
								children:
								reg int t11 <- global int x
							}
							<class 'ir.StatList'> 140604509532944 {
							parent = 140604509533040
								children:
								reg int t12 <- 1
							}
							reg int32_t t13 <- reg int t11 plus reg int t12
						}
						global int x <- reg int32_t t13
					}
					<class 'ir.StatList'> 140604509533904 {
					parent = 140604509525264
						children:
						<class 'ir.StatList'> 140604509533808 {
						parent = 140604509533904
							children:
							reg int t15 <- global int i
						}
						print reg int t15
					}
				}
				<class 'ir.StatList'> 140604509534624 {
				parent = 140604509535872
					children:
					<class 'ir.StatList'> 140604509534384 {
					parent = 140604509534624
						children:
						<class 'ir.StatList'> 140604509534048 {
						parent = 140604509534384
							children:
							reg int t16 <- global int i
						}
						<class 'ir.StatList'> 140604509534288 {
						parent = 140604509534384
							children:
							reg int t17 <- 1
						}
						reg int32_t t18 <- reg int t16 plus reg int t17
					}
					global int i <- reg int32_t t18
				}
				branch  to auto label label1
				label2: <class 'ir.EmptyStat'> 140604509535584 {
				parent = 140604509535872
				}
				<class 'ir.StatList'> 140604509528192 {
				parent = 140604509535872
				}
				<class 'ir.StatList'> 140604509528288 {
				parent = 140604509535872
				}
			}
			<class 'ir.StatList'> 140604509684160 {
			parent = 140604509686224
				children:
				<class 'ir.StatList'> 140604509683920 {
				parent = 140604509684160
					children:
					<class 'ir.StatList'> 140604509536016 {
					parent = 140604509683920
						children:
						reg int t22 <- auto int tmp_variable_for_strip_mining
					}
					<class 'ir.StatList'> 140604509683872 {
					parent = 140604509683920
						children:
						reg int t23 <- 1
					}
					reg int32_t t24 <- reg int t22 plus reg int t23
				}
				auto int tmp_variable_for_strip_mining <- reg int32_t t24
			}
			branch  to auto label label5
			label6: <class 'ir.EmptyStat'> 140604509685984 {
			parent = 140604509686224
			}
			<class 'ir.StatList'> 140604509528720 {
			parent = 140604509686224
			}
			<class 'ir.StatList'> 140604509685840 {
			parent = 140604509686224
				children:
				<class 'ir.StatList'> 140604509685312 {
				parent = 140604509685840
					children:
					<class 'ir.StatList'> 140604509685408 {
					parent = 140604509685312
						children:
						reg int t32 <- global int i
					}
					global int i <- reg int t32
				}
				label3: <class 'ir.StatList'> 140604509685072 {
				parent = 140604509685840
					children:
					<class 'ir.StatList'> 140604509684688 {
					parent = 140604509685072
						children:
						reg int t26 <- global int i
					}
					<class 'ir.StatList'> 140604509684976 {
					parent = 140604509685072
						children:
						reg int t27 <- 3
					}
					reg int32_t t28 <- reg int t26 lss reg int t27
				}
				branch on not reg int32_t t28 to auto label label4
				<class 'ir.StatList'> 140604509525264 {
				parent = 140604509685840
					children:
					<class 'ir.StatList'> 140604509533280 {
					parent = 140604509525264
						children:
						<class 'ir.StatList'> 140604509533040 {
						parent = 140604509533280
							children:
							<class 'ir.StatList'> 140604509532608 {
							parent = 140604509533040
								children:
								reg int t11 <- global int x
							}
							<class 'ir.StatList'> 140604509532944 {
							parent = 140604509533040
								children:
								reg int t12 <- 1
							}
							reg int32_t t13 <- reg int t11 plus reg int t12
						}
						global int x <- reg int32_t t13
					}
					<class 'ir.StatList'> 140604509533904 {
					parent = 140604509525264
						children:
						<class 'ir.StatList'> 140604509533808 {
						parent = 140604509533904
							children:
							reg int t15 <- global int i
						}
						print reg int t15
					}
				}
				<class 'ir.StatList'> 140604509525936 {
				parent = 140604509685840
					children:
					<class 'ir.StatList'> 140604509526176 {
					parent = 140604509525936
						children:
						<class 'ir.StatList'> 140604509529296 {
						parent = 140604509526176
							children:
							reg int t29 <- global int i
						}
						<class 'ir.StatList'> 140604509526080 {
						parent = 140604509526176
							children:
							reg int t30 <- 1
						}
						reg int32_t t31 <- reg int t29 plus reg int t30
					}
					global int i <- reg int32_t t31
				}
				branch  to auto label label3
				label4: <class 'ir.EmptyStat'> 140604509685552 {
				parent = 140604509685840
				}
				<class 'ir.StatList'> 140604509530112 {
				parent = 140604509685840
				}
				<class 'ir.StatList'> 140604509530208 {
				parent = 140604509685840
				}
			}
		}
	}
} 

<class 'ir.DefinitionList'> 140604510806576
<class 'ir.LoadImmStat'> 140604509529680
<class 'ir.StatList'> 140604509529104
Flattening 140604509529104 into 140604509530352
<class 'ir.StoreStat'> 140604509529152
<class 'ir.StatList'> 140604509530352
Flattening 140604509530352 into 140604510806720
<class 'ir.LoadImmStat'> 140604509684304
<class 'ir.StatList'> 140604509684400
Flattening 140604509684400 into 140604509684496
<class 'ir.StoreStat'> 140604509684544
<class 'ir.StatList'> 140604509684496
Flattening 140604509684496 into 140604509686224
<class 'ir.LoadStat'> 140604509530496
<class 'ir.StatList'> 140604509530304
Flattening 140604509530304 into 140604509530688
<class 'ir.LoadImmStat'> 140604509528816
<class 'ir.StatList'> 140604509530592
Flattening 140604509530592 into 140604509530688
<class 'ir.BinStat'> 140604509530784
<class 'ir.StatList'> 140604509530688
Flattening 140604509530688 into 140604509686224
<class 'ir.BranchStat'> 140604509686176
<class 'ir.LoadStat'> 140604509534768
<class 'ir.StatList'> 140604509534816
Flattening 140604509534816 into 140604509535200
<class 'ir.LoadImmStat'> 140604509535056
<class 'ir.StatList'> 140604509535104
Flattening 140604509535104 into 140604509535200
<class 'ir.BinStat'> 140604509535296
<class 'ir.StatList'> 140604509535200
Flattening 140604509535200 into 140604509535440
<class 'ir.StoreStat'> 140604509535488
<class 'ir.StatList'> 140604509535440
Flattening 140604509535440 into 140604509535872
<class 'ir.LoadStat'> 140604509530928
<class 'ir.StatList'> 140604509530976
Flattening 140604509530976 into 140604509532320
<class 'ir.LoadStat'> 140604509531216
<class 'ir.StatList'> 140604509531264
Flattening 140604509531264 into 140604509531648
<class 'ir.LoadImmStat'> 140604509531504
<class 'ir.StatList'> 140604509531552
Flattening 140604509531552 into 140604509531648
<class 'ir.BinStat'> 140604509531744
<class 'ir.StatList'> 140604509531648
Flattening 140604509531648 into 140604509532080
<class 'ir.LoadImmStat'> 140604509531936
<class 'ir.StatList'> 140604509531984
Flattening 140604509531984 into 140604509532080
<class 'ir.BinStat'> 140604509532176
<class 'ir.StatList'> 140604509532080
Flattening 140604509532080 into 140604509532320
<class 'ir.BinStat'> 140604509532416
<class 'ir.StatList'> 140604509532320
Flattening 140604509532320 into 140604509535872
<class 'ir.BranchStat'> 140604509535824
<class 'ir.LoadStat'> 140604509532560
<class 'ir.StatList'> 140604509532608
Flattening 140604509532608 into 140604509533040
<class 'ir.LoadImmStat'> 140604509532896
<class 'ir.StatList'> 140604509532944
Flattening 140604509532944 into 140604509533040
<class 'ir.BinStat'> 140604509533136
<class 'ir.StatList'> 140604509533040
Flattening 140604509533040 into 140604509533280
<class 'ir.StoreStat'> 140604509533328
<class 'ir.StatList'> 140604509533280
Flattening 140604509533280 into 140604509525264
<class 'ir.LoadStat'> 140604509533568
<class 'ir.StatList'> 140604509533808
Flattening 140604509533808 into 140604509533904
<class 'ir.PrintCommand'> 140604509533664
<class 'ir.StatList'> 140604509533904
Flattening 140604509533904 into 140604509525264
<class 'ir.StatList'> 140604509525264
Flattening 140604509525264 into 140604509685840
<class 'ir.LoadStat'> 140604509532656
<class 'ir.StatList'> 140604509534048
Flattening 140604509534048 into 140604509534384
<class 'ir.LoadImmStat'> 140604509534240
<class 'ir.StatList'> 140604509534288
Flattening 140604509534288 into 140604509534384
<class 'ir.BinStat'> 140604509534480
<class 'ir.StatList'> 140604509534384
Flattening 140604509534384 into 140604509534624
<class 'ir.StoreStat'> 140604509534672
<class 'ir.StatList'> 140604509534624
Flattening 140604509534624 into 140604509535872
<class 'ir.BranchStat'> 140604509535776
<class 'ir.EmptyStat'> 140604509535584
<class 'ir.StatList'> 140604509528192
Flattening 140604509528192 into 140604509535872
<class 'ir.StatList'> 140604509528288
Flattening 140604509528288 into 140604509535872
<class 'ir.StatList'> 140604509535872
Flattening 140604509535872 into 140604509686224
<class 'ir.LoadStat'> 140604509535968
<class 'ir.StatList'> 140604509536016
Flattening 140604509536016 into 140604509683920
<class 'ir.LoadImmStat'> 140604509683776
<class 'ir.StatList'> 140604509683872
Flattening 140604509683872 into 140604509683920
<class 'ir.BinStat'> 140604509684016
<class 'ir.StatList'> 140604509683920
Flattening 140604509683920 into 140604509684160
<class 'ir.StoreStat'> 140604509684208
<class 'ir.StatList'> 140604509684160
Flattening 140604509684160 into 140604509686224
<class 'ir.BranchStat'> 140604509686128
<class 'ir.EmptyStat'> 140604509685984
<class 'ir.StatList'> 140604509528720
Flattening 140604509528720 into 140604509686224
<class 'ir.LoadStat'> 140604509524784
<class 'ir.StatList'> 140604509685408
Flattening 140604509685408 into 140604509685312
<class 'ir.StoreStat'> 140604509685360
<class 'ir.StatList'> 140604509685312
Flattening 140604509685312 into 140604509685840
<class 'ir.LoadStat'> 140604509684640
<class 'ir.StatList'> 140604509684688
Flattening 140604509684688 into 140604509685072
<class 'ir.LoadImmStat'> 140604509684928
<class 'ir.StatList'> 140604509684976
Flattening 140604509684976 into 140604509685072
<class 'ir.BinStat'> 140604509685168
<class 'ir.StatList'> 140604509685072
Flattening 140604509685072 into 140604509685840
<class 'ir.BranchStat'> 140604509685792
<class 'ir.LoadStat'> 140604509529200
<class 'ir.StatList'> 140604509529296
Flattening 140604509529296 into 140604509526176
<class 'ir.LoadImmStat'> 140604509526032
<class 'ir.StatList'> 140604509526080
Flattening 140604509526080 into 140604509526176
<class 'ir.BinStat'> 140604509525888
<class 'ir.StatList'> 140604509526176
Flattening 140604509526176 into 140604509525936
<class 'ir.StoreStat'> 140604509526224
<class 'ir.StatList'> 140604509525936
Flattening 140604509525936 into 140604509685840
<class 'ir.BranchStat'> 140604509685744
<class 'ir.EmptyStat'> 140604509685552
<class 'ir.StatList'> 140604509530112
Flattening 140604509530112 into 140604509685840
<class 'ir.StatList'> 140604509530208
Flattening 140604509530208 into 140604509685840
<class 'ir.StatList'> 140604509685840
Flattening 140604509685840 into 140604509686224
<class 'ir.StatList'> 140604509686224
Flattening 140604509686224 into 140604510806720
<class 'ir.StatList'> 140604510806720
Not flattening 140604510806720 into 140604509526368 of type <class 'ir.Block'>
<class 'ir.Block'> 140604509526368

 <class 'ir.Block'> 140604509526368 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140604510806576 {
	parent = 140604509526368
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140604510806720 {
	parent = 140604509526368
		children:
		reg int t0 <- 0
		global int x <- reg int t0
		reg int t25 <- 0
		auto int tmp_variable_for_strip_mining <- reg int t25
		label5: <class 'ir.EmptyStat'> 140604509523968 {
		parent = 140604510806720
		}
		reg int t1 <- auto int tmp_variable_for_strip_mining
		reg int t2 <- 0
		reg int32_t t3 <- reg int t1 lss reg int t2
		branch on not reg int32_t t3 to auto label label6
		reg int t19 <- auto int tmp_variable_for_strip_mining
		reg int t20 <- 5
		reg int32_t t21 <- reg int t19 times reg int t20
		global int i <- reg int32_t t21
		label1: <class 'ir.EmptyStat'> 140604509526704 {
		parent = 140604510806720
		}
		reg int t4 <- global int i
		reg int t5 <- auto int tmp_variable_for_strip_mining
		reg int t6 <- 5
		reg int32_t t7 <- reg int t5 times reg int t6
		reg int t8 <- 5
		reg int32_t t9 <- reg int32_t t7 plus reg int t8
		reg int32_t t10 <- reg int t4 lss reg int32_t t9
		branch on not reg int32_t t10 to auto label label2
		<class 'ir.StatList'> 140604509525264 {
		parent = 140604510806720
			children:
			reg int t11 <- global int x
			reg int t12 <- 1
			reg int32_t t13 <- reg int t11 plus reg int t12
			global int x <- reg int32_t t13
			reg int t15 <- global int i
			print reg int t15
		}
		reg int t16 <- global int i
		reg int t17 <- 1
		reg int32_t t18 <- reg int t16 plus reg int t17
		global int i <- reg int32_t t18
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140604509535584 {
		parent = 140604510806720
		}
		reg int t22 <- auto int tmp_variable_for_strip_mining
		reg int t23 <- 1
		reg int32_t t24 <- reg int t22 plus reg int t23
		auto int tmp_variable_for_strip_mining <- reg int32_t t24
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 140604509685984 {
		parent = 140604510806720
		}
		reg int t32 <- global int i
		global int i <- reg int t32
		label3: <class 'ir.EmptyStat'> 140604509527712 {
		parent = 140604510806720
		}
		reg int t26 <- global int i
		reg int t27 <- 3
		reg int32_t t28 <- reg int t26 lss reg int t27
		branch on not reg int32_t t28 to auto label label4
		reg int t11 <- global int x
		reg int t12 <- 1
		reg int32_t t13 <- reg int t11 plus reg int t12
		global int x <- reg int32_t t13
		reg int t15 <- global int i
		print reg int t15
		reg int t29 <- global int i
		reg int t30 <- 1
		reg int32_t t31 <- reg int t29 plus reg int t30
		global int i <- reg int32_t t31
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140604509685552 {
		parent = 140604510806720
		}
	}
} 

successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 54
navigating children of <class 'ir.StatList'> 140604509525264 6
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368


DATALAYOUT



 <class 'ir.Block'> 140604509526368 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140604510806576 {
	parent = 140604509526368
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140604510806720 {
	parent = 140604509526368
		children:
		reg int t0 <- 0
		global int x; _g_x: def byte 4 <- reg int t0
		reg int t25 <- 0
		auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t25
		label5: <class 'ir.EmptyStat'> 140604509523968 {
		parent = 140604510806720
		}
		reg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t2 <- 0
		reg int32_t t3 <- reg int t1 lss reg int t2
		branch on not reg int32_t t3 to auto label label6
		reg int t19 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t20 <- 5
		reg int32_t t21 <- reg int t19 times reg int t20
		global int i; _g_i: def byte 4 <- reg int32_t t21
		label1: <class 'ir.EmptyStat'> 140604509526704 {
		parent = 140604510806720
		}
		reg int t4 <- global int i; _g_i: def byte 4
		reg int t5 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t6 <- 5
		reg int32_t t7 <- reg int t5 times reg int t6
		reg int t8 <- 5
		reg int32_t t9 <- reg int32_t t7 plus reg int t8
		reg int32_t t10 <- reg int t4 lss reg int32_t t9
		branch on not reg int32_t t10 to auto label label2
		<class 'ir.StatList'> 140604509525264 {
		parent = 140604510806720
			children:
			reg int t11 <- global int x; _g_x: def byte 4
			reg int t12 <- 1
			reg int32_t t13 <- reg int t11 plus reg int t12
			global int x; _g_x: def byte 4 <- reg int32_t t13
			reg int t15 <- global int i; _g_i: def byte 4
			print reg int t15
		}
		reg int t16 <- global int i; _g_i: def byte 4
		reg int t17 <- 1
		reg int32_t t18 <- reg int t16 plus reg int t17
		global int i; _g_i: def byte 4 <- reg int32_t t18
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140604509535584 {
		parent = 140604510806720
		}
		reg int t22 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4
		reg int t23 <- 1
		reg int32_t t24 <- reg int t22 plus reg int t23
		auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t24
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 140604509685984 {
		parent = 140604510806720
		}
		reg int t32 <- global int i; _g_i: def byte 4
		global int i; _g_i: def byte 4 <- reg int t32
		label3: <class 'ir.EmptyStat'> 140604509527712 {
		parent = 140604510806720
		}
		reg int t26 <- global int i; _g_i: def byte 4
		reg int t27 <- 3
		reg int32_t t28 <- reg int t26 lss reg int t27
		branch on not reg int32_t t28 to auto label label4
		reg int t11 <- global int x; _g_x: def byte 4
		reg int t12 <- 1
		reg int32_t t13 <- reg int t11 plus reg int t12
		global int x; _g_x: def byte 4 <- reg int32_t t13
		reg int t15 <- global int i; _g_i: def byte 4
		print reg int t15
		reg int t29 <- global int i; _g_i: def byte 4
		reg int t30 <- 1
		reg int32_t t31 <- reg int t29 plus reg int t30
		global int i; _g_i: def byte 4 <- reg int32_t t31
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140604509685552 {
		parent = 140604510806720
		}
	}
} 

successfully navigated attr  defs  of <class 'ir.Block'> 140604509526368
navigating children of <class 'ir.StatList'> 140604510806720 54
navigating children of <class 'ir.StatList'> 140604509525264 6
successfully navigated attr  body  of <class 'ir.Block'> 140604509526368
Liveness sets
140604509525600 [label="BB140604509525600{\nreg int t11 <- global int x; _g_x: def byte 4\nreg int t12 <- 1\nreg int32_t t13 <- reg int t11 plus reg int t12\nglobal int x; _g_x: def byte 4 <- reg int32_t t13\nreg int t15 <- global int i; _g_i: def byte 4\nprint reg int t15}"];
140604509525600 -> exit140604510833264 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];

gen: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
kill: {reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12}
live_in: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
live_out: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
140604509525504 [label="BB140604509525504{\nreg int t0 <- 0\nglobal int x; _g_x: def byte 4 <- reg int t0\nreg int t25 <- 0\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t25}"];
140604509525504 -> 140604509525456 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];

gen: set()
kill: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int x; _g_x: def byte 4, reg int t0, reg int t25}
live_in: {reg int32_t t13, reg int t15, reg int t11, reg int t12, global int i; _g_i: def byte 4}
live_out: {reg int32_t t13, reg int t15, reg int t11, reg int t12, global int i; _g_i: def byte 4}
140604509525456 [label="BB140604509525456{\n[auto label label5]\nlabel5: <class 'ir.EmptyStat'> 140604509523968 {
parent = 140604510806720
}\nreg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t2 <- 0\nreg int32_t t3 <- reg int t1 lss reg int t2\nbranch on not reg int32_t t3 to auto label label6}"];
140604509525456 -> 140604509525696 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12}"];
140604509525456 -> 140604509525024 [style=dashed,label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
kill: {reg int t1, reg int t2, reg int32_t t3}
live_in: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
live_out: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
140604509525696 [label="BB140604509525696{\nreg int t19 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t20 <- 5\nreg int32_t t21 <- reg int t19 times reg int t20\nglobal int i; _g_i: def byte 4 <- reg int32_t t21}"];
140604509525696 -> 140604509526992 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
kill: {reg int t20, reg int32_t t21, global int i; _g_i: def byte 4, reg int t19}
live_in: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12}
live_out: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12}
140604509526992 [label="BB140604509526992{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140604509526704 {
parent = 140604510806720
}\nreg int t4 <- global int i; _g_i: def byte 4\nreg int t5 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t6 <- 5\nreg int32_t t7 <- reg int t5 times reg int t6\nreg int t8 <- 5\nreg int32_t t9 <- reg int32_t t7 plus reg int t8\nreg int32_t t10 <- reg int t4 lss reg int32_t t9\nbranch on not reg int32_t t10 to auto label label2}"];
140604509526992 -> 140604509525744 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];
140604509526992 -> 140604509524976 [style=dashed,label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, global int i; _g_i: def byte 4}
kill: {reg int t5, reg int t8, reg int t6, reg int32_t t9, reg int32_t t10, reg int32_t t7, reg int t4}
live_in: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
live_out: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
140604509525744 [label="BB140604509525744{\n<class 'ir.StatList'> 140604509525264 {
parent = 140604510806720
	children:
	reg int t11 <- global int x; _g_x: def byte 4
	reg int t12 <- 1
	reg int32_t t13 <- reg int t11 plus reg int t12
	global int x; _g_x: def byte 4 <- reg int32_t t13
	reg int t15 <- global int i; _g_i: def byte 4
	print reg int t15
}\nreg int t16 <- global int i; _g_i: def byte 4\nreg int t17 <- 1\nreg int32_t t18 <- reg int t16 plus reg int t17\nglobal int i; _g_i: def byte 4 <- reg int32_t t18\nbranch  to auto label label1}"];
140604509525744 -> 140604509526992 [style=dashed,label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];

gen: {reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
kill: {reg int32_t t18, reg int t16, global int i; _g_i: def byte 4, reg int t17}
live_in: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
live_out: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
140604509524976 [label="BB140604509524976{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140604509535584 {
parent = 140604510806720
}\nreg int t22 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t23 <- 1\nreg int32_t t24 <- reg int t22 plus reg int t23\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t24\nbranch  to auto label label5}"];
140604509524976 -> 140604509525456 [style=dashed,label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];

gen: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4}
kill: {auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t22, reg int t23, reg int32_t t24}
live_in: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
live_out: {reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
140604509525024 [label="BB140604509525024{\n[auto label label6]\nlabel6: <class 'ir.EmptyStat'> 140604509685984 {
parent = 140604510806720
}\nreg int t32 <- global int i; _g_i: def byte 4\nglobal int i; _g_i: def byte 4 <- reg int t32}"];
140604509525024 -> 140604509525168 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];

gen: {global int i; _g_i: def byte 4}
kill: {reg int t32, global int i; _g_i: def byte 4}
live_in: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
live_out: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
140604509525168 [label="BB140604509525168{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140604509527712 {
parent = 140604510806720
}\nreg int t26 <- global int i; _g_i: def byte 4\nreg int t27 <- 3\nreg int32_t t28 <- reg int t26 lss reg int t27\nbranch on not reg int32_t t28 to auto label label4}"];
140604509525168 -> 140604509525216 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];
140604509525168 -> 140604509527088 [style=dashed,label="set()"];

gen: {global int i; _g_i: def byte 4}
kill: {reg int32_t t28, reg int t27, reg int t26}
live_in: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
live_out: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
140604509525216 [label="BB140604509525216{\nreg int t11 <- global int x; _g_x: def byte 4\nreg int t12 <- 1\nreg int32_t t13 <- reg int t11 plus reg int t12\nglobal int x; _g_x: def byte 4 <- reg int32_t t13\nreg int t15 <- global int i; _g_i: def byte 4\nprint reg int t15\nreg int t29 <- global int i; _g_i: def byte 4\nreg int t30 <- 1\nreg int32_t t31 <- reg int t29 plus reg int t30\nglobal int i; _g_i: def byte 4 <- reg int32_t t31\nbranch  to auto label label3}"];
140604509525216 -> 140604509525168 [style=dashed,label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];

gen: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
kill: {reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t30, reg int t12, reg int t29, reg int32_t t31, global int i; _g_i: def byte 4}
live_in: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
live_out: {global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}
140604509527088 [label="BB140604509527088{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140604509685552 {
parent = 140604510806720
}}"];
140604509527088 -> exit140604510833264 [label="set()"];

gen: set()
kill: set()
live_in: set()
live_out: set()

Instruction liveness
BASIC BLOCK:
140604509525600 [label="BB140604509525600{\nreg int t11 <- global int x; _g_x: def byte 4\nreg int t12 <- 1\nreg int32_t t13 <- reg int t11 plus reg int t12\nglobal int x; _g_x: def byte 4 <- reg int32_t t13\nreg int t15 <- global int i; _g_i: def byte 4\nprint reg int t15}"];
140604509525600 -> exit140604510833264 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];


inst=reg int t11 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={reg int t11, global int i; _g_i: def byte 4}                                   
inst=reg int t12 <- 1                                                                 live_in={reg int t11, global int i; _g_i: def byte 4}                                                                                                                                                            live_out={reg int t11, reg int t12, global int i; _g_i: def byte 4}                      
inst=reg int32_t t13 <- reg int t11 plus reg int t12                                  live_in={reg int t11, reg int t12, global int i; _g_i: def byte 4}                                                                                                                                               live_out={reg int32_t t13, global int i; _g_i: def byte 4}                               
inst=global int x; _g_x: def byte 4 <- reg int32_t t13                                live_in={reg int32_t t13, global int i; _g_i: def byte 4}                                                                                                                                                        live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
inst=reg int t15 <- global int i; _g_i: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, reg int t15, global int i; _g_i: def byte 4}   
inst=print reg int t15                                                                live_in={global int x; _g_x: def byte 4, reg int t15, global int i; _g_i: def byte 4}                                                                                                                            live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
BASIC BLOCK:
140604509525504 [label="BB140604509525504{\nreg int t0 <- 0\nglobal int x; _g_x: def byte 4 <- reg int t0\nreg int t25 <- 0\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t25}"];
140604509525504 -> 140604509525456 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];


inst=reg int t0 <- 0                                                                  live_in={reg int32_t t13, reg int t15, reg int t11, reg int t12, global int i; _g_i: def byte 4}                                                                                                                 live_out={reg int32_t t13, reg int t0, reg int t15, reg int t11, reg int t12, global int i; _g_i: def byte 4}
inst=global int x; _g_x: def byte 4 <- reg int t0                                     live_in={reg int32_t t13, reg int t0, reg int t15, reg int t11, reg int t12, global int i; _g_i: def byte 4}                                                                                                     live_out={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=reg int t25 <- 0                                                                 live_in={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}                                                                                 live_out={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t25, global int i; _g_i: def byte 4}
inst=auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int t25 live_in={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t25, global int i; _g_i: def byte 4}                                                                    live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
BASIC BLOCK:
140604509525456 [label="BB140604509525456{\n[auto label label5]\nlabel5: <class 'ir.EmptyStat'> 140604509523968 {
parent = 140604510806720
}\nreg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t2 <- 0\nreg int32_t t3 <- reg int t1 lss reg int t2\nbranch on not reg int32_t t3 to auto label label6}"];
140604509525456 -> 140604509525696 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12}"];
140604509525456 -> 140604509525024 [style=dashed,label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];


inst=label5: <class 'ir.EmptyStat'> 140604509523968 {
parent = 140604510806720
}      live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=reg int t1 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t1}
inst=reg int t2 <- 0                                                                  live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t1} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t1, reg int t2}
inst=reg int32_t t3 <- reg int t1 lss reg int t2                                      live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t1, reg int t2} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int32_t t3, global int i; _g_i: def byte 4}
inst=branch on not reg int32_t t3 to auto label label6                                live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int32_t t3, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
BASIC BLOCK:
140604509525696 [label="BB140604509525696{\nreg int t19 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t20 <- 5\nreg int32_t t21 <- reg int t19 times reg int t20\nglobal int i; _g_i: def byte 4 <- reg int32_t t21}"];
140604509525696 -> 140604509526992 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];


inst=reg int t19 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12}                           live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t19}
inst=reg int t20 <- 5                                                                 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t19}              live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t19, reg int t20}
inst=reg int32_t t21 <- reg int t19 times reg int t20                                 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t19, reg int t20} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int32_t t21, reg int t11, global int x; _g_x: def byte 4, reg int t12}
inst=global int i; _g_i: def byte 4 <- reg int32_t t21                                live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int32_t t21, reg int t11, global int x; _g_x: def byte 4, reg int t12}          live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
BASIC BLOCK:
140604509526992 [label="BB140604509526992{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140604509526704 {
parent = 140604510806720
}\nreg int t4 <- global int i; _g_i: def byte 4\nreg int t5 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t6 <- 5\nreg int32_t t7 <- reg int t5 times reg int t6\nreg int t8 <- 5\nreg int32_t t9 <- reg int32_t t7 plus reg int t8\nreg int32_t t10 <- reg int t4 lss reg int32_t t9\nbranch on not reg int32_t t10 to auto label label2}"];
140604509526992 -> 140604509525744 [label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];
140604509526992 -> 140604509524976 [style=dashed,label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];


inst=label1: <class 'ir.EmptyStat'> 140604509526704 {
parent = 140604510806720
}      live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=reg int t4 <- global int i; _g_i: def byte 4                                     live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t4}
inst=reg int t5 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t5, reg int t4}
inst=reg int t6 <- 5                                                                  live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t5, reg int t4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t5, reg int t6, reg int t4}
inst=reg int32_t t7 <- reg int t5 times reg int t6                                    live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t5, reg int t6, reg int t4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int32_t t7, reg int t12, global int i; _g_i: def byte 4, reg int t4}
inst=reg int t8 <- 5                                                                  live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int32_t t7, reg int t12, global int i; _g_i: def byte 4, reg int t4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int32_t t7, reg int t12, global int i; _g_i: def byte 4, reg int t8, reg int t4}
inst=reg int32_t t9 <- reg int32_t t7 plus reg int t8                                 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int32_t t7, reg int t12, global int i; _g_i: def byte 4, reg int t8, reg int t4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int32_t t9, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t4}
inst=reg int32_t t10 <- reg int t4 lss reg int32_t t9                                 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int32_t t9, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int32_t t10}
inst=branch on not reg int32_t t10 to auto label label2                               live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int32_t t10} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
BASIC BLOCK:
140604509525744 [label="BB140604509525744{\n<class 'ir.StatList'> 140604509525264 {
parent = 140604510806720
	children:
	reg int t11 <- global int x; _g_x: def byte 4
	reg int t12 <- 1
	reg int32_t t13 <- reg int t11 plus reg int t12
	global int x; _g_x: def byte 4 <- reg int32_t t13
	reg int t15 <- global int i; _g_i: def byte 4
	print reg int t15
}\nreg int t16 <- global int i; _g_i: def byte 4\nreg int t17 <- 1\nreg int32_t t18 <- reg int t16 plus reg int t17\nglobal int i; _g_i: def byte 4 <- reg int32_t t18\nbranch  to auto label label1}"];
140604509525744 -> 140604509526992 [style=dashed,label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];


inst=<class 'ir.StatList'> 140604509525264 {
parent = 140604510806720
	children:
	reg int t11 <- global int x; _g_x: def byte 4
	reg int t12 <- 1
	reg int32_t t13 <- reg int t11 plus reg int t12
	global int x; _g_x: def byte 4 <- reg int32_t t13
	reg int t15 <- global int i; _g_i: def byte 4
	print reg int t15
} live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=reg int t16 <- global int i; _g_i: def byte 4                                    live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t16}
inst=reg int t17 <- 1                                                                 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t16}              live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t16, reg int t17}
inst=reg int32_t t18 <- reg int t16 plus reg int t17                                  live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, reg int t16, reg int t17} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int32_t t18, reg int t11, global int x; _g_x: def byte 4, reg int t12}
inst=global int i; _g_i: def byte 4 <- reg int32_t t18                                live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int32_t t18, reg int t11, global int x; _g_x: def byte 4, reg int t12}          live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=branch  to auto label label1                                                     live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
BASIC BLOCK:
140604509524976 [label="BB140604509524976{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140604509535584 {
parent = 140604510806720
}\nreg int t22 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4\nreg int t23 <- 1\nreg int32_t t24 <- reg int t22 plus reg int t23\nauto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t24\nbranch  to auto label label5}"];
140604509524976 -> 140604509525456 [style=dashed,label="{reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}"];


inst=label2: <class 'ir.EmptyStat'> 140604509535584 {
parent = 140604510806720
}      live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=reg int t22 <- auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t22, reg int t12, global int i; _g_i: def byte 4}
inst=reg int t23 <- 1                                                                 live_in={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t22, reg int t12, global int i; _g_i: def byte 4}                                                                    live_out={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t22, reg int t23}
inst=reg int32_t t24 <- reg int t22 plus reg int t23                                  live_in={reg int32_t t13, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4, reg int t22, reg int t23}                                                       live_out={reg int32_t t13, reg int t15, reg int32_t t24, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4 <- reg int32_t t24 live_in={reg int32_t t13, reg int t15, reg int32_t t24, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}                                                                live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
inst=branch  to auto label label5                                                     live_in={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4} live_out={reg int32_t t13, auto int tmp_variable_for_strip_mining; _g_tmp_variable_for_strip_mining: def byte 4, reg int t15, reg int t11, global int x; _g_x: def byte 4, reg int t12, global int i; _g_i: def byte 4}
BASIC BLOCK:
140604509525024 [label="BB140604509525024{\n[auto label label6]\nlabel6: <class 'ir.EmptyStat'> 140604509685984 {
parent = 140604510806720
}\nreg int t32 <- global int i; _g_i: def byte 4\nglobal int i; _g_i: def byte 4 <- reg int t32}"];
140604509525024 -> 140604509525168 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];


inst=label6: <class 'ir.EmptyStat'> 140604509685984 {
parent = 140604510806720
}      live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
inst=reg int t32 <- global int i; _g_i: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, reg int t32}                                   
inst=global int i; _g_i: def byte 4 <- reg int t32                                    live_in={global int x; _g_x: def byte 4, reg int t32}                                                                                                                                                            live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
BASIC BLOCK:
140604509525168 [label="BB140604509525168{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140604509527712 {
parent = 140604510806720
}\nreg int t26 <- global int i; _g_i: def byte 4\nreg int t27 <- 3\nreg int32_t t28 <- reg int t26 lss reg int t27\nbranch on not reg int32_t t28 to auto label label4}"];
140604509525168 -> 140604509525216 [label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];
140604509525168 -> 140604509527088 [style=dashed,label="set()"];


inst=label3: <class 'ir.EmptyStat'> 140604509527712 {
parent = 140604510806720
}      live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
inst=reg int t26 <- global int i; _g_i: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, reg int t26, global int i; _g_i: def byte 4}   
inst=reg int t27 <- 3                                                                 live_in={global int x; _g_x: def byte 4, reg int t26, global int i; _g_i: def byte 4}                                                                                                                            live_out={reg int t27, global int x; _g_x: def byte 4, reg int t26, global int i; _g_i: def byte 4}
inst=reg int32_t t28 <- reg int t26 lss reg int t27                                   live_in={reg int t27, global int x; _g_x: def byte 4, reg int t26, global int i; _g_i: def byte 4}                                                                                                               live_out={global int x; _g_x: def byte 4, reg int32_t t28, global int i; _g_i: def byte 4}
inst=branch on not reg int32_t t28 to auto label label4                               live_in={global int x; _g_x: def byte 4, reg int32_t t28, global int i; _g_i: def byte 4}                                                                                                                        live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
BASIC BLOCK:
140604509525216 [label="BB140604509525216{\nreg int t11 <- global int x; _g_x: def byte 4\nreg int t12 <- 1\nreg int32_t t13 <- reg int t11 plus reg int t12\nglobal int x; _g_x: def byte 4 <- reg int32_t t13\nreg int t15 <- global int i; _g_i: def byte 4\nprint reg int t15\nreg int t29 <- global int i; _g_i: def byte 4\nreg int t30 <- 1\nreg int32_t t31 <- reg int t29 plus reg int t30\nglobal int i; _g_i: def byte 4 <- reg int32_t t31\nbranch  to auto label label3}"];
140604509525216 -> 140604509525168 [style=dashed,label="{global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}"];


inst=reg int t11 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={reg int t11, global int i; _g_i: def byte 4}                                   
inst=reg int t12 <- 1                                                                 live_in={reg int t11, global int i; _g_i: def byte 4}                                                                                                                                                            live_out={reg int t11, reg int t12, global int i; _g_i: def byte 4}                      
inst=reg int32_t t13 <- reg int t11 plus reg int t12                                  live_in={reg int t11, reg int t12, global int i; _g_i: def byte 4}                                                                                                                                               live_out={reg int32_t t13, global int i; _g_i: def byte 4}                               
inst=global int x; _g_x: def byte 4 <- reg int32_t t13                                live_in={reg int32_t t13, global int i; _g_i: def byte 4}                                                                                                                                                        live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
inst=reg int t15 <- global int i; _g_i: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, reg int t15, global int i; _g_i: def byte 4}   
inst=print reg int t15                                                                live_in={global int x; _g_x: def byte 4, reg int t15, global int i; _g_i: def byte 4}                                                                                                                            live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
inst=reg int t29 <- global int i; _g_i: def byte 4                                    live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, reg int t29}                                   
inst=reg int t30 <- 1                                                                 live_in={global int x; _g_x: def byte 4, reg int t29}                                                                                                                                                            live_out={reg int t30, global int x; _g_x: def byte 4, reg int t29}                      
inst=reg int32_t t31 <- reg int t29 plus reg int t30                                  live_in={reg int t30, global int x; _g_x: def byte 4, reg int t29}                                                                                                                                               live_out={reg int32_t t31, global int x; _g_x: def byte 4}                               
inst=global int i; _g_i: def byte 4 <- reg int32_t t31                                live_in={reg int32_t t31, global int x; _g_x: def byte 4}                                                                                                                                                        live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
inst=branch  to auto label label3                                                     live_in={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                                                                                                                                         live_out={global int x; _g_x: def byte 4, global int i; _g_i: def byte 4}                
BASIC BLOCK:
140604509527088 [label="BB140604509527088{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140604509685552 {
parent = 140604510806720
}}"];
140604509527088 -> exit140604510833264 [label="set()"];


inst=label4: <class 'ir.EmptyStat'> 140604509685552 {
parent = 140604510806720
}      live_in=set()                                                                                                                                                                                                    live_out=set()                                                                           


REGALLOC


LIVENESS INTERVALS:
[{'var': reg int t11, 'interv': range(0, 50)}, {'var': reg int t12, 'interv': range(1, 50)}, {'var': reg int32_t t13, 'interv': range(2, 51)}, {'var': reg int t15, 'interv': range(4, 53)}, {'var': reg int t0, 'interv': range(6, 7)}, {'var': reg int t25, 'interv': range(8, 9)}, {'var': reg int t1, 'interv': range(11, 13)}, {'var': reg int t2, 'interv': range(12, 13)}, {'var': reg int32_t t3, 'interv': range(13, 14)}, {'var': reg int t19, 'interv': range(15, 17)}, {'var': reg int t20, 'interv': range(16, 17)}, {'var': reg int32_t t21, 'interv': range(17, 18)}, {'var': reg int t4, 'interv': range(20, 26)}, {'var': reg int t5, 'interv': range(21, 23)}, {'var': reg int t6, 'interv': range(22, 23)}, {'var': reg int32_t t7, 'interv': range(23, 25)}, {'var': reg int t8, 'interv': range(24, 25)}, {'var': reg int32_t t9, 'interv': range(25, 26)}, {'var': reg int32_t t10, 'interv': range(26, 27)}, {'var': reg int t16, 'interv': range(29, 31)}, {'var': reg int t17, 'interv': range(30, 31)}, {'var': reg int32_t t18, 'interv': range(31, 32)}, {'var': reg int t22, 'interv': range(35, 37)}, {'var': reg int t23, 'interv': range(36, 37)}, {'var': reg int32_t t24, 'interv': range(37, 38)}, {'var': reg int t32, 'interv': range(41, 42)}, {'var': reg int t26, 'interv': range(44, 46)}, {'var': reg int t27, 'interv': range(45, 46)}, {'var': reg int32_t t28, 'interv': range(46, 47)}, {'var': reg int t29, 'interv': range(54, 56)}, {'var': reg int t30, 'interv': range(55, 56)}, {'var': reg int32_t t31, 'interv': range(56, 57)}]
vartoreg = {reg int t11: 0, reg int t12: 1, reg int32_t t13: 2, reg int t15: 3, reg int t0: 4, reg int t25: 5, reg int t1: 6, reg int t2: 7, reg int32_t t3: 8, reg int t19: 4, reg int t20: 5, reg int32_t t21: 4, reg int t4: 6, reg int t5: 7, reg int t6: 8, reg int32_t t7: 5, reg int t8: 4, reg int32_t t9: 8, reg int32_t t10: 7, reg int t16: 8, reg int t17: 5, reg int32_t t18: 4, reg int t22: 6, reg int t23: 7, reg int32_t t24: 8, reg int t32: 5, reg int t26: 4, reg int t27: 6, reg int32_t t28: 7, reg int t29: 2, reg int t30: 0, reg int32_t t31: 8}


CODEGEN


	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_i, 4
	.comm _g_tmp_variable_for_strip_mining, 4
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 140604510806720 type <class 'ir.StatList'>
	mov r4, #0
	ldr r12, .const0
	str r4, [r12]
	mov r5, #0
	ldr r12, .const1
	str r5, [r12]
label5:
	@ emptystat
	ldr r12, .const2
	ldr r6, [r12]
	mov r7, #0
	cmp r6, r7
	movlt r8, #1
	movge r8, #0
	tst r8, r8
	beq label6
	ldr r12, .const3
	ldr r4, [r12]
	mov r5, #5
	mul r4, r4, r5
	ldr r12, .const4
	str r4, [r12]
label1:
	@ emptystat
	ldr r12, .const5
	ldr r6, [r12]
	ldr r12, .const6
	ldr r7, [r12]
	mov r8, #5
	mul r5, r7, r8
	mov r4, #5
	add r8, r5, r4
	cmp r6, r8
	movlt r7, #1
	movge r7, #0
	tst r7, r7
	beq label2
	@ irnode 140604509525264 type <class 'ir.StatList'>
	ldr r12, .const7
	ldr r0, [r12]
	mov r1, #1
	add r2, r0, r1
	ldr r12, .const8
	str r2, [r12]
	ldr r12, .const9
	ldr r3, [r12]
	push {r0, r1, r2, r3}
	mov r0, r3
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const10
	ldr r8, [r12]
	mov r5, #1
	add r4, r8, r5
	ldr r12, .const11
	str r4, [r12]
	b label1
label2:
	@ emptystat
	ldr r12, .const12
	ldr r6, [r12]
	mov r7, #1
	add r8, r6, r7
	ldr r12, .const13
	str r8, [r12]
	b label5
label6:
	@ emptystat
	ldr r12, .const14
	ldr r5, [r12]
	ldr r12, .const15
	str r5, [r12]
label3:
	@ emptystat
	ldr r12, .const16
	ldr r4, [r12]
	mov r6, #3
	cmp r4, r6
	movlt r7, #1
	movge r7, #0
	tst r7, r7
	beq label4
	ldr r12, .const17
	ldr r0, [r12]
	mov r1, #1
	add r2, r0, r1
	ldr r12, .const18
	str r2, [r12]
	ldr r12, .const19
	ldr r3, [r12]
	push {r0, r1, r2, r3}
	mov r0, r3
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const20
	ldr r2, [r12]
	mov r0, #1
	add r8, r2, r0
	ldr r12, .const21
	str r8, [r12]
	b label3
label4:
	@ emptystat
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const0:
	.word _g_x
.const1:
	.word _g_tmp_variable_for_strip_mining
.const2:
	.word _g_tmp_variable_for_strip_mining
.const3:
	.word _g_tmp_variable_for_strip_mining
.const4:
	.word _g_i
.const5:
	.word _g_i
.const6:
	.word _g_tmp_variable_for_strip_mining
.const7:
	.word _g_x
.const8:
	.word _g_x
.const9:
	.word _g_i
.const10:
	.word _g_i
.const11:
	.word _g_i
.const12:
	.word _g_tmp_variable_for_strip_mining
.const13:
	.word _g_tmp_variable_for_strip_mining
.const14:
	.word _g_i
.const15:
	.word _g_i
.const16:
	.word _g_i
.const17:
	.word _g_x
.const18:
	.word _g_x
.const19:
	.word _g_i
.const20:
	.word _g_i
.const21:
	.word _g_i

